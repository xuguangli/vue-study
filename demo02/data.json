{
  "success": true,
  "data": [
    {
      "id": "57ea257b3670ca3f44c5beb6",
      "author_id": "541bf9b9ad60405c1f151a03",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><blockquote>\n<p>写在头部</p>\n</blockquote>\n<p>本项目写于小程序发布之初，期间小程序官方有过几次更新，例如准备移除了loading组件、改变page的默认高度等，主要看的还是博卡君的文章，后来在朋友的建议下在9月27号写了本篇文章并分享到github上，是做为微信小应用的入门教程，<strong>并非某在线学习网站499收费课程的作业</strong>，特此声明。</p>\n<blockquote>\n<p>微信应用号入门实践之cnode社区版</p>\n</blockquote>\n<p>首先感谢cnode社区提供的api，本次实现了简单的cnode社区应用号制作。\n实现了数据的读取、展示，\n实现了简单的布局，\n实现了下一页功能。</p>\n<p>放上我的github地址\n<a href=\"https://github.com/coolfishstudio/wechat-webapp-cnode\">https://github.com/coolfishstudio/wechat-webapp-cnode</a></p>\n<p><img src=\"//dn-cnode.qbox.me/Fo4zG2Vfe50352POPZYXv8Ls0Jcc\" alt=\"首页列表\">\n<img src=\"//dn-cnode.qbox.me/Fl7TiaW13s541lHZ7Crq7NxKshqG\" alt=\"内容详情\"></p>\n<p>下面就说说我做这个的过程，不足之处，请多多指教，只愿为进步。</p>\n<h2>1.创建项目</h2>\n<p>首先，在官网下载工具，<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=1474887501214\">下载地址</a> 我的是选择mac版本0.9.092300。</p>\n<p>然后跟着官方的<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/?t=1474887501301\">简版教程</a> 创建一个项目。</p>\n<h4>注：现在官方的工具支持无appid创建项目。</h4>\n<h5>1.打开开发者工具，选择“添加项目”</h5>\n<p><img src=\"//dn-cnode.qbox.me/FsqxRNIzNDyzItbl-vhAFPr0J5t2\" alt></p>\n<h5>2.选择无appid，填写地址，创建项目</h5>\n<p><img src=\"//dn-cnode.qbox.me/Fp098WRAyxgJ415Dt_f0YGhjIMHr\" alt></p>\n<h5>3.创建成功，看到默认的Demo项目页面</h5>\n<p><img src=\"//dn-cnode.qbox.me/FuvUmKfcUu8MeLc4eeuwNBfkbfMC\" alt></p>\n<h2>2.配置</h2>\n<p>默认的项目里已经没有关于tabBar的配置信息，所以为了学习，我把这个配置进行了修改。</p>\n<p>首先关于配置的说明同样来自于<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html?t=1474887501556\">官方</a></p>\n<p>注意：官方的代码有些字段是不一样的，小心被坑。</p>\n<pre class=\"prettyprint\"><code>{\n  &quot;pages&quot;:[\n    &quot;pages&#x2F;index&#x2F;index&quot;,\n    &quot;pages&#x2F;logs&#x2F;logs&quot;\n  ],\n  &quot;window&quot;:{\n    &quot;backgroundTextStyle&quot;:&quot;light&quot;,\n    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,\n    &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;,\n    &quot;navigationBarTextStyle&quot;:&quot;black&quot;\n  },\n  &quot;tabBar&quot;:{\n    &quot;list&quot;: [{\n      &quot;pagePath&quot;: &quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;: &quot;首页&quot;\n    }, {\n      &quot;pagePath&quot;: &quot;pages&#x2F;logs&#x2F;logs&quot;,\n      &quot;text&quot;: &quot;日志&quot;\n    }]\n  }\n}\n\n</code></pre><p>增加了tabBar, 查看调试\n<img src=\"//dn-cnode.qbox.me/Fl-OboTDeCULcPbs5BiM81nj_Xrc\" alt>\n看界面是如此的简陋，为此针对tabBar参考官方说明进行了简单的美化。</p>\n<pre class=\"prettyprint\"><code> &quot;tabBar&quot;:{\n    &quot;color&quot;:&quot;#272636&quot;,\n    &quot;selectedColor&quot;:&quot;#80bd01&quot;,\n    &quot;backgroundColor&quot;:&quot;#fff&quot;,\n    &quot;borderStyle&quot;:&quot;white&quot;,\n    &quot;list&quot;:[{\n      &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;:&quot;首页&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my_hl.png&quot;\n    },{\n      &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;:&quot;我的&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list_hl.png&quot;\n    }]\n  }\n</code></pre><p>效果如图\n<img src=\"//dn-cnode.qbox.me/FjzwAq6RH5TstCXIYb5ZIt6z3cuj\" alt>\n最后根据文档，对默认页面的窗口表现进行了修改</p>\n<pre class=\"prettyprint\"><code>  &quot;window&quot;:{\n    &quot;backgroundTextStyle&quot;:&quot;black&quot;,\n    &quot;backgroundColor&quot;:&quot;#fff&quot;,\n    &quot;navigationBarBackgroundColor&quot;:&quot;#000&quot;,\n    &quot;navigationBarTitleText&quot;:&quot;CNODE 应用号版&quot;,\n    &quot;navigationBarTextStyle&quot;:&quot;white&quot;,\n    &quot;enablePullDownRefresh&quot;:&quot;true&quot;\n  },\n</code></pre><p>效果如图\n<img src=\"//dn-cnode.qbox.me/Fl4S7o2m50JXXt1xebSgq1pNR_iX\" alt>\n整体配置文件为</p>\n<pre class=\"prettyprint\"><code>{\n  &quot;pages&quot;:[\n    &quot;pages&#x2F;index&#x2F;index&quot;,\n    &quot;pages&#x2F;logs&#x2F;logs&quot;\n  ],\n  &quot;window&quot;:{\n    &quot;backgroundTextStyle&quot;:&quot;black&quot;,\n    &quot;backgroundColor&quot;:&quot;#fff&quot;,\n    &quot;navigationBarBackgroundColor&quot;:&quot;#000&quot;,\n    &quot;navigationBarTitleText&quot;:&quot;CNODE 应用号版&quot;,\n    &quot;navigationBarTextStyle&quot;:&quot;white&quot;,\n    &quot;enablePullDownRefresh&quot;:&quot;true&quot;\n  },\n  &quot;tabBar&quot;:{\n    &quot;color&quot;:&quot;#272636&quot;,\n    &quot;selectedColor&quot;:&quot;#80bd01&quot;,\n    &quot;backgroundColor&quot;:&quot;#fff&quot;,\n    &quot;borderStyle&quot;:&quot;white&quot;,\n    &quot;list&quot;:[{\n      &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;:&quot;首页&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my_hl.png&quot;\n    },{\n      &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;:&quot;我的&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list_hl.png&quot;\n    }]\n  }\n}\n</code></pre><h2>3.制作首页列表</h2>\n<p>根据官方要求，我在pages文件夹内创建了topics文件夹，并创建了对应了 topics.js、topics.wxml、topics.wxss 三个文件。</p>\n<h3>1.注册页面</h3>\n<p>首先在配置文件里注册这个topics,</p>\n<pre class=\"prettyprint\"><code>  &quot;pages&quot;:[\n    &quot;pages&#x2F;topics&#x2F;topics&quot;,\n    &quot;pages&#x2F;index&#x2F;index&quot;,\n    &quot;pages&#x2F;logs&#x2F;logs&quot;\n  ],\n</code></pre><p>并且制定tabBar点击跳到对应的topics页面</p>\n<pre class=\"prettyprint\"><code>  &quot;tabBar&quot;:{\n    &quot;color&quot;:&quot;#272636&quot;,\n    &quot;selectedColor&quot;:&quot;#80bd01&quot;,\n    &quot;backgroundColor&quot;:&quot;#fff&quot;,\n    &quot;borderStyle&quot;:&quot;white&quot;,\n    &quot;list&quot;:[{\n      &quot;pagePath&quot;:&quot;pages&#x2F;topics&#x2F;topics&quot;,\n      &quot;text&quot;:&quot;首页&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;my_hl.png&quot;\n    },{\n      &quot;pagePath&quot;:&quot;pages&#x2F;index&#x2F;index&quot;,\n      &quot;text&quot;:&quot;我的&quot;,\n      &quot;iconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list.png&quot;,\n      &quot;selectedIconPath&quot;:&quot;images&#x2F;tabBar&#x2F;list_hl.png&quot;\n    }]\n  }\n</code></pre><h5>注意：我发现注册页面的顺序会影响到默认显示tabBar的顺序，所以我把<code>&quot;pages/topics/topics&quot;</code>放到了<code>&quot;pages/index/index&quot;</code>的前面</h5>\n<p>然后编写topics.js</p>\n<pre class=\"prettyprint\"><code>Page({\n  data: {\n    title: &#x27;首页列表&#x27;\n  },\n  onLoad: function () {\n    console.log(&#x27;onLoad by topics&#x27;);\n  }\n});\n</code></pre><p>以及topics.wxml文件</p>\n<pre class=\"prettyprint\"><code>&lt;view class=&quot;topics-main&quot;&gt;\n  测试首页列表界面\n&lt;&#x2F;view&gt;\n</code></pre><p>和topics.wxss文件</p>\n<pre class=\"prettyprint\"><code>.topics-main {\n  background: #f60;\n  height: 100%;\n}\n</code></pre><p>最后效果如图\n<img src=\"//dn-cnode.qbox.me/FiunQ0XhES_sidHnkBN9YxABF2iI\" alt></p>\n<h3>2.创建请求</h3>\n<p>根据文档<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html?t=1474887499445\">请求数据</a>，在util文件夹内创建一个api.js文件，专门进行数据请求处理。</p>\n<pre class=\"prettyprint\"><code>&#x27;use strict&#x27;;\nvar HOST_URI = &#x27;https:&#x2F;&#x2F;cnodejs.org&#x2F;api&#x2F;v1&#x27;;\n\nvar GET_TOPICS = &#x27;&#x2F;topics&#x27;;\nvar GET_TOPIC_BY_ID = &#x27;&#x2F;topic&#x2F;&#x27;;\n\nfunction obj2uri (obj) {\n    return Object.keys(obj).map(function (k) {\n        return encodeURIComponent(k) + &#x27;=&#x27; + encodeURIComponent(obj[k]);\n    }).join(&#x27;&amp;&#x27;);\n}\n\nmodule.exports = {\n    &#x2F;&#x2F; 获取列表数据\n    getTopics: function (obj) {\n        return HOST_URI + GET_TOPICS + &#x27;?&#x27; + obj2uri(obj);\n    },\n    &#x2F;&#x2F; 获取内容页数据\n    getTopicByID: function (id, obj) {\n        return HOST_URI + GET_TOPIC_BY_ID + id + &#x27;?&#x27; + obj2uri(obj);\n    }\n};\n</code></pre><p>修改topics.js</p>\n<pre class=\"prettyprint\"><code>var Api = require(&#x27;..&#x2F;..&#x2F;utils&#x2F;api.js&#x27;);\n\nPage({\n  data: {\n    title: &#x27;首页列表&#x27;\n  },\n  onLoad: function () {\n    console.log(&#x27;onLoad by topics&#x27;);\n    this.fetchData();&#x2F;&#x2F; 获取数据\n  },\n  fetchData: function (data) {\n    &#x2F;&#x2F; 处理参数\n    if (!data) data = {};\n    if (!data.page) data.page = 1;\n    wx.request({\n      url: Api.getTopics(data),\n      success: function (res) {\n        console.log(res);\n      }\n    });\n  }\n});\n</code></pre><p>效果如图\n<img src=\"//dn-cnode.qbox.me/FoonyAMQBgqDpiTKZshoB3ZmnUEU\" alt>\n成功拿到了数据。</p>\n<h3>3.完善首页列表</h3>\n<p>拿到了数据，也能修改界面，那么就直接完善这个首页吧</p>\n<p>代码就不放了，直接上图\n<img src=\"//dn-cnode.qbox.me/Fo4zG2Vfe50352POPZYXv8Ls0Jcc\" alt>\n我认为这里值得说的大概只有loading、循环、传参、下一页和页面跳转了。</p>\n<h4>1.loading</h4>\n<pre class=\"prettyprint\"><code>  &lt;loading hidden=&quot;{{hidden}}&quot;&gt;\n    加载中...\n  &lt;&#x2F;loading&gt;\n</code></pre><p>在topics.wxml中写官方提供的loading组件，根据在topics.js中对hidden值的修改，来触发loading。</p>\n<h4>2.循环数据，展示列表</h4>\n<p>文档提供了<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/list.html?t=1474887501556\">列表渲染</a></p>\n<p>通过<code>wx:for</code>实现列表的渲染。</p>\n<h5>注意: 默认数组的当前项的下标变量名默认为index，数组当前项的变量名默认为item。</h5>\n<pre class=\"prettyprint\"><code>&lt;block wx:for=&quot;{{postsList}}&quot;&gt;\n  &lt;view class=&quot;posts-item&quot; index=&quot;{{index}}&quot; id=&quot;{{item.id}}&quot; catchtap=&quot;redictDetail&quot;&gt;\n    &lt;view class=&quot;author&quot;&gt;\n      &lt;image class=&quot;author-avatar&quot; src=&quot;{{item.author.avatar_url}}&quot;&gt;&lt;&#x2F;image&gt;\n      &lt;view class=&quot;author-name&quot;&gt;{{item.author.loginname}}&lt;&#x2F;view&gt;\n      &lt;view class=&quot;posts-tag hot&quot; wx:if=&quot;{{item.top === true}}&quot;&gt;置顶&lt;&#x2F;view&gt;\n      &lt;view class=&quot;posts-tag&quot; wx:if=&quot;{{item.good === true}}&quot;&gt;精华&lt;&#x2F;view&gt;\n      &lt;view class=&quot;posts-last-reply&quot;&gt;{{item.last_reply_at}}&lt;&#x2F;view&gt;\n    &lt;&#x2F;view&gt;\n    &lt;view class=&quot;posts-title&quot;&gt;{{item.title}}&lt;&#x2F;view&gt;\n    &lt;view class=&quot;bar-info&quot;&gt;\n      &lt;view class=&quot;bar-info-item&quot;&gt;\n        &lt;image class=&quot;bar-info-item-icon&quot; src=&quot;&#x2F;images&#x2F;icon&#x2F;reply.png&quot;&gt;&lt;&#x2F;image&gt;\n        &lt;view class=&quot;bar-info-item-number&quot;&gt;{{item.reply_count}}&lt;&#x2F;view&gt;\n      &lt;&#x2F;view&gt;\n      &lt;view class=&quot;bar-info-item&quot;&gt;\n        &lt;image class=&quot;bar-info-item-icon&quot; src=&quot;&#x2F;images&#x2F;icon&#x2F;visit.png&quot;&gt;&lt;&#x2F;image&gt;\n        &lt;view class=&quot;bar-info-item-number&quot;&gt;{{item.visit_count}}&lt;&#x2F;view&gt;\n      &lt;&#x2F;view&gt;\n    &lt;&#x2F;view&gt;\n  &lt;&#x2F;view&gt;\n&lt;&#x2F;block&gt;\n</code></pre><p>附上一个没有样式的列表展现\n<img src=\"//dn-cnode.qbox.me/FkoTZY1Q9kqOWa1-e70FHifzHVo7\" alt></p>\n<h4>3.传参，实现tab切换</h4>\n<p>根据cnode的api可以知道通过tab不同的值，获得到不同标签下的内容列表。</p>\n<p>所以 在页面的最上面 tab 栏中</p>\n<pre class=\"prettyprint\"><code>  &lt;view class=&quot;top-bar&quot;&gt;\n    &lt;view class=&quot;top-bar-item&quot; id=&quot;all&quot; catchtap=&quot;onTapTag&quot;&gt;全部&lt;&#x2F;view&gt;\n    &lt;view class=&quot;top-bar-item&quot; id=&quot;good&quot; catchtap=&quot;onTapTag&quot;&gt;精华&lt;&#x2F;view&gt;\n    &lt;view class=&quot;top-bar-item&quot; id=&quot;share&quot; catchtap=&quot;onTapTag&quot;&gt;分享&lt;&#x2F;view&gt;\n    &lt;view class=&quot;top-bar-item&quot; id=&quot;ask&quot; catchtap=&quot;onTapTag&quot;&gt;问答&lt;&#x2F;view&gt;\n    &lt;view class=&quot;top-bar-item&quot; id=&quot;job&quot; catchtap=&quot;onTapTag&quot;&gt;招聘&lt;&#x2F;view&gt;\n  &lt;&#x2F;view&gt;\n</code></pre><p>将id进行定义，通过获取id拿到对应的tab类型。</p>\n<p>其中<code>catchtap</code>是事件绑定。</p>\n<p>bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。</p>\n<p>在topics.js获取</p>\n<pre class=\"prettyprint\"><code>  onTapTag: function (e) {\n    var self = this;\n    var tab = e.currentTarget.id;\n    &#x2F;&#x2F; 这里就能获取到不同的tab值了\n    self.setData({\n      tab: tab\n    });\n    if (tab !== &#x27;all&#x27;) {\n      this.fetchData({tab: tab});\n    } else {\n      this.fetchData();\n    }\n  },\n</code></pre><h4>4.下一页的实现</h4>\n<p>根据文档，组件的视图容器中有<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/component/scroll-view.html?t=1474887496374\">scroll-view</a>这个可滚动视图区域。</p>\n<h5>注意：使用竖向滚动时，需要给&lt;scroll-view/&gt;一个固定高度。</h5>\n<pre class=\"prettyprint\"><code>&lt;scroll-view class=&quot;posts-list&quot; style=&quot;height:100%&quot; scroll-y=&quot;true&quot; bindscrolltolower=&quot;lower&quot;&gt;\n  &lt;block wx:for=&quot;{{postsList}}&quot;&gt;\n    ...\n  &lt;&#x2F;block&gt;\n&lt;&#x2F;scroll-view&gt;\n</code></pre><p>topics.js文件</p>\n<pre class=\"prettyprint\"><code>  lower: function (e) {\n    var self = this;\n    &#x2F;&#x2F; 修改当前页码\n    self.setData({\n      page: self.data.page + 1\n    });\n    &#x2F;&#x2F; 判断当前页的tab值 进行请求数据\n    if (self.data.tab !== &#x27;all&#x27;) {\n      this.fetchData({tab: self.data.tab, page: self.data.page});\n    } else {\n      this.fetchData({page: self.data.page});\n    }\n  }\n</code></pre><h4>5.跳页的实现</h4>\n<p>在<code>posts-item</code>中已经进行了事件绑定。利用<code>wx.navigateTo</code>实现页面的跳转。</p>\n<h5>注意：一个应用同时只能打开5个页面，当已经打开了5个页面之后，wx.navigateTo不能正常打开新页面。</h5>\n<pre class=\"prettyprint\"><code>redictDetail: function (e) {\n  console.log(&#x27;我要看详情&#x27;);\n  var id = e.currentTarget.id,\n      url = &#x27;..&#x2F;detail&#x2F;detail?id=&#x27; + id;\n      &#x2F;&#x2F; 这里的detail是需要创建对应的文件，以及页面注册的\n  wx.navigateTo({\n    url: url\n  })\n},\n</code></pre><h3>4.实现详情页</h3>\n<p>同样的原理，创建detail文件，并注册，获取数据，并美化页面。\n<img src=\"//dn-cnode.qbox.me/FmJ5n5-t3gLCfFQTpbzIBS1_ag2L\" alt></p>\n<h3>5.总结</h3>\n<ul>\n<li>微信小应用页面的脚本逻辑在是在JsCore中运行，JsCore是一个没有窗口对象的环境，所以不能再脚本中使用window，也无法在脚本中操作组件</li>\n<li>同样不能用jquery</li>\n<li>也不能操作dom</li>\n<li>部分标签不支持，比如 h1-h6 会编译报错。</li>\n<li>暂时没找到解决富文本详情页显示的办法。</li>\n<li>整体下来，感觉开发简单，限制很多。</li>\n<li>写过react的看这个确实比较简单。</li>\n</ul>\n<p>放上我的github地址\n<a href=\"https://github.com/coolfishstudio/wechat-webapp-cnode\">https://github.com/coolfishstudio/wechat-webapp-cnode</a></p>\n<p>最后感谢：cnode社区和博卡君</p>\n<p>附上 博卡君的教程</p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/750055\">全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/750495\">博卡君的应用号（小程序）开发教程首发第二弹！（0923）</a></p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/750974\">第三弹！全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/751826\">第四弹！全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/752421\">第五弹！全球首个微信应用号开发教程！通宵吐血赶稿，每日更新！</a></p>\n<p><a href=\"https://my.oschina.net/wwnick/blog/753597\">第六弹！全球首个微信小程序（应用号）开发教程！通宵吐血赶稿！</a>\n－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n总结一下我遇到的问题\n1.页面没有注册 那么 template 模版无法传递数据 拿不到动态数据 但是能使用wxss\n2.进度条注意右侧百分号 100%的时候 进度条缩短\n3.轮播图加上属性vertical=“vertical/horizontal” 可以修改布局方向，文档没说\n4.有关icon，文档提供默认的只有9个，实际目前测出有15个 success, info, warn, waiting, safe_success, safe_warn,success_circle, success_no_circle, waiting_circle, circle, download,info_circle, cancel, search, clear\n－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－\n鉴于有很多童鞋还不了解小应用和h5页面有什么区别\n我决定安利一下我公司的一个文章\n<a href=\"http://url.cn/41kcsQr\">小云百科:什么是“微信小程序”</a></p>\n</div>",
      "title": "分享我用cnode社区api做微信小应用的入门过程",
      "last_reply_at": "2017-01-11T13:32:25.089Z",
      "good": false,
      "top": true,
      "reply_count": 155,
      "visit_count": 27831,
      "create_at": "2016-09-27T07:53:31.872Z",
      "author": {
        "loginname": "coolfishstudio",
        "avatar_url": "https://avatars.githubusercontent.com/u/8791709?v=3&s=120"
      }
    },
    {
      "id": "581b0c4ebb9452c9052e7acb",
      "author_id": "5110f2bedf9e9fcc584e4677",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>GitHub: <a href=\"https://github.com/nswbmw/N-blog\">https://github.com/nswbmw/N-blog</a></p>\n<h2>目录</h2>\n<ul>\n<li>开发环境搭建\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.1%20Node.js%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md\">Node.js 的安装与使用</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.1%20Node.js%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md#111-%E5%AE%89%E8%A3%85-nodejs\">安装 Node.js</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.1%20Node.js%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md#112-n-%E5%92%8C-nvm\">n 和 nvm</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.1%20Node.js%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md#113-nrm\">nrm</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.2%20MongoDB%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md\">MongoDB 的安装与使用</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.2%20MongoDB%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md#121-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%90%AF%E5%8A%A8-mongodb\">安装与启动 MongoDB</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/1.2%20MongoDB%20%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8.md#122-robomongo-%E5%92%8C-mongochef\">Robomongo 和 MongoChef</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Node.js 知识点讲解\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.1%20require.md\">require</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.2%20exports%20%E5%92%8C%20module.exports.md\">exports 和 module.exports</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.3%20Promise.md\">Promise</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.4%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.md\">环境变量</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.5%20package.json.md\">packge.json</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.5%20package.json.md#251-semver\">semver</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md\">npm 使用注意事项</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md#261-npm-init\">npm init</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md#262-npm-install\">npm install</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md#263-npm-scripts\">npm scripts</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/2.6%20npm%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md#264-npm-shrinkwrap\">npm shrinkwrap </a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Hello, Express\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.1%20%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA%20Express%20%E9%A1%B9%E7%9B%AE.md\">初始化一个 Express 项目</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.1%20%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AA%20Express%20%E9%A1%B9%E7%9B%AE.md#311-supervisor\">supervisor</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.2%20%E8%B7%AF%E7%94%B1.md\">路由</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.2%20%E8%B7%AF%E7%94%B1.md#321-expressrouter\">express.Router</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.3%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.md\">模板引擎</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.3%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.md#331-ejs\">ejs</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.3%20%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.md#332-includes\">includes</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.4%20Express%20%E6%B5%85%E6%9E%90.md\">Express 浅析</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.4%20Express%20%E6%B5%85%E6%9E%90.md#341-%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8E-next\">中间件与 next</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/3.4%20Express%20%E6%B5%85%E6%9E%90.md#342-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\">错误处理</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>一个简单的博客\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.1%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.md\">开发环境</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.2%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.md\">准备工作</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.2%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.md#421-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\">目录结构</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.2%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.md#422-%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E6%A8%A1%E5%9D%97\">安装依赖模块</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.3%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md\">配置文件</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.3%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md#431-config-lite\">config-lite</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.4%20%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.md\">功能设计</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.4%20%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.md#441-%E5%8A%9F%E8%83%BD%E4%B8%8E%E8%B7%AF%E7%94%B1%E8%AE%BE%E8%AE%A1\">功能与路由设计</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.4%20%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.md#442-%E4%BC%9A%E8%AF%9D\">会话</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.4%20%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.md#443-%E9%A1%B5%E9%9D%A2%E9%80%9A%E7%9F%A5\">页面通知</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.4%20%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1.md#444-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6\">权限控制</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.5%20%E9%A1%B5%E9%9D%A2%E8%AE%BE%E8%AE%A1.md\">页面设计</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.5%20%E9%A1%B5%E9%9D%A2%E8%AE%BE%E8%AE%A1.md#451-%E7%BB%84%E4%BB%B6\">组件</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.5%20%E9%A1%B5%E9%9D%A2%E8%AE%BE%E8%AE%A1.md#452-applocals-%E5%92%8C-reslocals\">app.locals 和 res.locals</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.6%20%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.md\">连接数据库</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.6%20%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93.md#461-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8-mongolass\">为什么使用 Mongolass</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.7%20%E6%B3%A8%E5%86%8C.md\">注册</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.7%20%E6%B3%A8%E5%86%8C.md#471-%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1\">用户模型设计</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.7%20%E6%B3%A8%E5%86%8C.md#472-%E6%B3%A8%E5%86%8C%E9%A1%B5\">注册页</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.7%20%E6%B3%A8%E5%86%8C.md#473-%E6%B3%A8%E5%86%8C%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\">注册与文件上传</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.8%20%E7%99%BB%E5%87%BA%E4%B8%8E%E7%99%BB%E5%BD%95.md\">登出与登录</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.8%20%E7%99%BB%E5%87%BA%E4%B8%8E%E7%99%BB%E5%BD%95.md#481-%E7%99%BB%E5%87%BA\">登出</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.8%20%E7%99%BB%E5%87%BA%E4%B8%8E%E7%99%BB%E5%BD%95.md#482-%E7%99%BB%E5%BD%95%E9%A1%B5\">登录页</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.8%20%E7%99%BB%E5%87%BA%E4%B8%8E%E7%99%BB%E5%BD%95.md#483-%E7%99%BB%E5%BD%95\">登录</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.9%20%E6%96%87%E7%AB%A0.md\">文章</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.9%20%E6%96%87%E7%AB%A0.md#491-%E6%96%87%E7%AB%A0%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1\">文章模型设计</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.9%20%E6%96%87%E7%AB%A0.md#492-%E5%8F%91%E8%A1%A8%E6%96%87%E7%AB%A0\">发表文章</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.9%20%E6%96%87%E7%AB%A0.md#493-%E4%B8%BB%E9%A1%B5%E4%B8%8E%E6%96%87%E7%AB%A0%E9%A1%B5\">主页与文章页</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.9%20%E6%96%87%E7%AB%A0.md#494-%E7%BC%96%E8%BE%91%E4%B8%8E%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0\">编辑与删除文章</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.10%20%E7%95%99%E8%A8%80.md\">留言</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.10%20%E7%95%99%E8%A8%80.md#4101-%E7%95%99%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1\">留言模型设计</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.10%20%E7%95%99%E8%A8%80.md#4102-%E6%98%BE%E7%A4%BA%E7%95%99%E8%A8%80\">显示留言</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.10%20%E7%95%99%E8%A8%80.md#4103-%E5%8F%91%E8%A1%A8%E4%B8%8E%E5%88%A0%E9%99%A4%E7%95%99%E8%A8%80\">发表与删除留言</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.11%20404%20%E9%A1%B5%E9%9D%A2.md\">404页面</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.12%20%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2.md\">错误页面</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.13%20%E6%97%A5%E5%BF%97.md\">日志</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.13%20%E6%97%A5%E5%BF%97.md#4131-winston-%E5%92%8C-express-winston\">winston 和 express-winston</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.13%20%E6%97%A5%E5%BF%97.md#4132-gitignore\">.gitignore</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.14%20%E6%B5%8B%E8%AF%95.md\">测试</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.14%20%E6%B5%8B%E8%AF%95.md#4141-mocha-%E5%92%8C-supertest\">mocha 和 supertest</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.14%20%E6%B5%8B%E8%AF%95.md#4142-%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87\">测试覆盖率</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md\">部署</a>\n<ul>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md#4151-%E7%94%B3%E8%AF%B7-mlab\">申请 MLab</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md#4152-pm2\">pm2</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md#4152-%E9%83%A8%E7%BD%B2%E5%88%B0-heroku\">部署到 Heroku</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md#4153-%E9%83%A8%E7%BD%B2%E5%88%B0-ucloud\">部署到 UCloud</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>",
      "title": "《一起学 Node.js》彻底重写完毕",
      "last_reply_at": "2017-01-11T10:20:56.496Z",
      "good": false,
      "top": true,
      "reply_count": 193,
      "visit_count": 46965,
      "create_at": "2016-11-03T10:07:10.155Z",
      "author": {
        "loginname": "nswbmw",
        "avatar_url": "https://avatars.githubusercontent.com/u/4279697?v=3&s=120"
      }
    },
    {
      "id": "5870e9da04dcf9a706a745f0",
      "author_id": "4efc278525fa69ac6900000f",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p><a href=\"https://eggjs.org/\">egg</a> 自9月份在宁JS正式宣布开源以来，一直在迭代改进。源代码是开放出来了，但是文档一直落后于代码进度。</p>\n<p><strong>开源不仅仅是代码，文档也是非常重要的部分。</strong></p>\n<p>为了让 egg 文档尽快完成第一个发布版本，egg 团队已经齐聚北京，陪伴着雾霾在集中讨论和分工开始编写着自高考以来最大的一次文字工作。</p>\n<p>在吸着雾霾写文档之余，我们也想尽快让对 egg 感兴趣的同学在第一时间看到最新鲜的文档，所以我们决定每天都会直播当天 review 通过的文档，会以回复的形式粘贴写来。</p>\n<p>当然，第一版文档并不会涵盖 egg 框架的方方面面，如果不足，欢迎大家敦促指正。</p>\n</div>",
      "title": "直播 egg 文档产生的过程",
      "last_reply_at": "2017-01-11T04:25:43.475Z",
      "good": true,
      "top": true,
      "reply_count": 54,
      "visit_count": 1812,
      "create_at": "2017-01-07T13:15:06.899Z",
      "author": {
        "loginname": "fengmk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/156269?v=3&s=120"
      }
    },
    {
      "id": "587606622967eeb01aafe689",
      "author_id": "586c447e6a2a2984675bb06e",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>安装VUE脚手架 错误提示NPM 版本太低，更新NPM版本，然后发现之前安装的淘宝镜像源使用不了，于是手动删除了全局的淘宝镜像，最后发现NPM也用不了 有朋友遇到过同样的问题吗 急！！！</p>\n</div>",
      "title": "淘宝NPM镜像如何卸载",
      "last_reply_at": "2017-01-11T13:31:39.236Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 64,
      "create_at": "2017-01-11T10:18:10.866Z",
      "author": {
        "loginname": "lpm0205",
        "avatar_url": "https://avatars.githubusercontent.com/u/20716732?v=3&s=120"
      }
    },
    {
      "id": "5875f8d02967eeb01aafe683",
      "author_id": "584f57aa4c17b38d354365f5",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>www域名解析到了一个ip上，apache监听着这个ip上的80端口。\nnodejs监听同一个ip上的8080端口，我想把二级域名绑定到这个8080端口上。\n有什么办法吗？</p>\n</div>",
      "title": "二级域名绑定8080端口问题",
      "last_reply_at": "2017-01-11T12:18:43.752Z",
      "good": false,
      "top": false,
      "reply_count": 3,
      "visit_count": 82,
      "create_at": "2017-01-11T09:20:16.299Z",
      "author": {
        "loginname": "ReakingAd",
        "avatar_url": "https://avatars.githubusercontent.com/u/11304748?v=3&s=120"
      }
    },
    {
      "id": "5875f38ac4f5cf76196712e9",
      "author_id": "550fb120d792542a297897c5",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>我的schema是这样的：</p>\n<pre class=\"prettyprint language-  let schema = new mongoose.Schema({\"><code>   type: String,\n   value: String,\n   attributes: [mongoose.Schema.Types.Mixed],\n   created_at: {type: Date, default: new Date()},\n   updated_at: {type: Date, default: new Date()},\n }); &#96;&#96;&#96;\n我在库中新建数据，\n&#96;&#96;&#96;{\n&quot;_id&quot; : ObjectId(&quot;5874b8193501af79a31dbb2b&quot;),\n&quot;type&quot; : &quot;user_id&quot;,\n&quot;value&quot; : &quot;1&quot;,\n&quot;updated_at&quot; : ISODate(&quot;2017-01-10T10:31:30.314Z&quot;),\n&quot;created_at&quot; : ISODate(&quot;2017-01-10T10:31:30.314Z&quot;),\n&quot;attributes&quot; : [\n\t{\n\t\t&quot;source&quot; : &quot;campus&quot;,\n\t\t&quot;nickname&quot; : &quot;x13015528669&quot;,\n\t\t&quot;created_at&quot; : ISODate(&quot;2017-01-10T10:31:53.971Z&quot;)\n\t}\n],\n&quot;__v&quot; : 0\n},&#96;&#96;&#96;\n然后在代码中：\n&#96;&#96;&#96;let query = {type: &#x27;user_id, value:&#x27;1&#x27;} &#96;&#96;&#96;\n拿到上面的那条数据，然后在拿那个_id去查：\n&#96;&#96;&#96;query = {_id: &#x27;5874b8193501af79a31dbb2b&#x27;}&#96;&#96;&#96;,\n这个时候就会抛出错误：\n&#96;&#96;&#96;CastError: Cast to ObjectId failed for value &quot;5875976f8a03b2229c544c50&quot; at path &quot;_id&quot; for model &quot;vertex&quot;&#96;&#96;&#96;\n这个值：‘5875976f8a03b2229c544c50’已经是ObjectId格式的数据，但是为什么还是会抛出转换错误呢？\nstackoverflow上面没有找到合适的答案，有兴趣的朋友麻烦帮忙解决下，谢谢。</code></pre></div>",
      "title": "mongoose: CastError: Cast to ObjectId failed for value \"5875976f8a03b2229c544c50\" at path \"_id\"",
      "last_reply_at": "2017-01-11T12:18:26.401Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 88,
      "create_at": "2017-01-11T08:57:46.005Z",
      "author": {
        "loginname": "semicoyoung",
        "avatar_url": "https://avatars.githubusercontent.com/u/7311122?v=3&s=120"
      }
    },
    {
      "id": "584545bd4c17b38d354363af",
      "author_id": "58240f411120be9438b02a62",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>序:\n相信大家都有过部署项目的经验，不过，每个人的部署方式却不尽相同，下面列举两个常见的方式。</p>\n<ul>\n<li><em>直接使用rsync/scp命令拷贝代码，然后登录到对应机器操作一些启动命令</em></li>\n<li><em>写好一个脚本文件放在服务器上，在脚本中使用git 、pm2之类的命令完成部署，登陆对应服务器执行该脚本</em></li>\n</ul>\n<p>但是这些方式都有一些缺点：</p>\n<ul>\n<li><em>都需要分别登录对应服务器上去操作。如果有个十台八台的，操作的时间成本成倍提高</em></li>\n<li><em>对于回滚操作支持不好。需要手动维护之前的版本的代码，上线后发现bug，还要一台一台的回滚</em></li>\n</ul>\n<h4>那么，有没有更好的部署方式呢？</h4>\n<hr>\n<h3>shipit-deploy 闪亮登场</h3>\n<p>Set of deployment tasks for Shipit based on git and rsync commands.</p>\n<h4>目标：</h4>\n<ul>\n<li>一键部署多台服务器。</li>\n<li>一键回滚多台服务器。</li>\n<li>本地操作，不需要登录服务器。</li>\n<li>方便定制扩展，实现全自动化流程。</li>\n</ul>\n<hr>\n<h3>一，如何使用</h3>\n<p>1, shipit-deploy是基于<a href=\"https://www.npmjs.com/package/shipit-cli\">shipit-cli</a>的基础上实现的。所以要安装shipit-cli和shipit-deploy这两个。</p>\n<blockquote>\n<p>npm install --save-dev shipit-cli\nnpm install --save-dev shipit-deploy</p>\n</blockquote>\n<p>2, 和服务器建立信任关系，可以使用ssh-copy-id\n3, 在项目根目录下创建shipitfile.js</p>\n<pre class=\"prettyprint\"><code>module.exports = function (shipit) {\n  require(&#x27;shipit-deploy&#x27;)(shipit);\n  shipit.initConfig({\n    default: {\n      workspace: &#x27;&#x2F;tmp&#x2F;github-monitor&#x27;,\n      deployTo: &#x27;&#x2F;tmp&#x2F;deploy_to&#x27;,\n      repositoryUrl: &#x27;https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git&#x27;,\n      ignores: [&#x27;.git&#x27;, &#x27;node_modules&#x27;],\n      keepReleases: 2,\n      deleteOnRollback: false,\n      key: &#x27;&#x2F;path&#x2F;to&#x2F;key&#x27;,\n      shallowClone: true\n    },\n    staging: {\n      servers: [&#x27;user@myserver1.com&#x27;, &#x27;user@myserver2.com&#x27;],\n      branch: &#x27;master&#x27;\n    }\n  });\n};\n</code></pre><p>4, 然后执行下面命令即可一键部署/回滚myserver1和myserver2两台机器上</p>\n<blockquote>\n<p>shipit staging deploy\nshipit staging rollback</p>\n</blockquote>\n<p>更详细的使用，请移步<a href=\"https://www.npmjs.com/package/shipit-deploy\">官网</a>查看。</p>\n<hr>\n<h3>二，原理</h3>\n<p>为什么shipit可以做到不用登陆就可以操作远程服务器呢？</p>\n<blockquote>\n<p>这是因为它使用的是ssh命令操作远程服务器，不了解的同学可以在终端敲个命令感受一下：ssh user<a href=\"/user/remote_host\">@remote_host</a> “pwd; ls”。</p>\n</blockquote>\n<p>为什么可以一键部署到多台机器呢？</p>\n<blockquote>\n<p>简单来讲，配置中的每个server都会对应创建一个对象，每执行一个远程命令，会遍历所有的对象去执行。</p>\n</blockquote>\n<hr>\n<h3>三，定制扩展</h3>\n<p>代码已经上传到服务器了，接下来就是要启动项目了，比如我们用pm2来启动，启动前还需要执行npm install来安装项目依赖。那这些流程是否也可以加入到自动化的流程中呢？</p>\n<p><strong>当然可以</strong>，shipit-deploy的执行过程中会执行一系列任务，每执行完一个任务，都会emit一个<a href=\"https://www.npmjs.com/package/shipit-deploy#workflow-tasks\">事件</a>，只要我们监听这个事件就可以做我们想做的事。接下来我们就定制一个简单的shipit的插件。</p>\n<blockquote>\n<p>index.js</p>\n</blockquote>\n<pre class=\"prettyprint\"><code>var utils = require(&#x27;shipit-utils&#x27;);\nmodule.exports = function (shipit) {\n  shipit = utils.getShipit(shipit);\n  require(&#x27;.&#x2F;do_something&#x27;)(shipit);\n  shipit.on(&#x27;published&#x27;, function () { &#x2F;&#x2F; 监听published事件，触发后就执行do_something任务。\n    shipit.start(&#x27;do_something&#x27;);\n  });\n};\n</code></pre><blockquote>\n<p>do_something.js</p>\n</blockquote>\n<pre class=\"prettyprint\"><code>var utils = require(&#x27;shipit-utils&#x27;);\nmodule.exports = function(shipit) {\n  utils.registerTask(shipit, &#x27;do_something&#x27;, task);\n  function task() {\n    shipit.config = shipit.config || {}; &#x2F;&#x2F; 读取相关配置\n    var cmd = &#x27;cd &#x2F;path&#x2F;to&#x2F;project; npm install --production&#x27;; &#x2F;&#x2F; 你想要执行的命令\n    return shipit.remote(cmd); &#x2F;&#x2F; 当触发do_something后，就会在服务器上执行cmd。\n  }\n}\n</code></pre><p>插件定制、发布完毕后，在shipitfile.js中引入即可</p>\n<pre class=\"prettyprint\"><code>module.exports = function (shipit) {\n  require(&#x27;your-plugin&#x27;)(shipit);\n  shipit.initConfig({\n      ...\n  });\n};\n</code></pre><hr>\n<h3>四、与脚本结合使用</h3>\n<p>那么，是不是定制了插件就完全不用脚本文件了呢，不一定，脚本文件有其好处，我们也可以很简单的把你现有的脚本加入自动化流程中。</p>\n<p>只要把do_something.js中的cmd替换为执行你的脚本即可，例如：</p>\n<blockquote>\n<p>var cmd = ‘cd /path/to/script; sh <a href=\"http://script.sh\">script.sh</a>’; // 执行一个脚本文件</p>\n</blockquote>\n<hr>\n<h3>五，不仅仅是nodejs</h3>\n<p>既然我们可以使用shipit-deploy来实现同步代码，用插件和脚本来完成启动等额外工作，那shipit-deploy就不仅仅可以部署nodejs的项目，其他语言的项目也可以按照这个套路来实现自动化的部署。近日，本人就成功的使用shipit-cli/shipit-deploy实现了一个php的项目的自动化部署。\n<em>为了尽量少的影响 <strong>非nodejs</strong> 的项目，最好把shipit-cli和shipit-deploy全局安装。</em></p>\n</div>",
      "title": "使用shipit-deploy实现自动化的多服务器部署",
      "last_reply_at": "2017-01-11T12:16:40.500Z",
      "good": true,
      "top": false,
      "reply_count": 20,
      "visit_count": 1454,
      "create_at": "2016-12-05T10:47:25.037Z",
      "author": {
        "loginname": "danlanxiaohei",
        "avatar_url": "https://avatars.githubusercontent.com/u/3272530?v=3&s=120"
      }
    },
    {
      "id": "58744b1c9a36eb8e34087562",
      "author_id": "58047648fdf3bd3d651186db",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>node 服务器端的业务代码需要压缩吗，压缩会不会提升服务器的运行速度</p>\n</div>",
      "title": "node 服务器端的业务代码需要压缩吗，压缩会不会提升服务器的运行速度",
      "last_reply_at": "2017-01-11T11:41:42.331Z",
      "good": false,
      "top": false,
      "reply_count": 11,
      "visit_count": 468,
      "create_at": "2017-01-10T02:46:52.895Z",
      "author": {
        "loginname": "youyouStorm",
        "avatar_url": "https://avatars.githubusercontent.com/u/22880975?v=3&s=120"
      }
    },
    {
      "id": "5876192c9f92195c1bf9fe59",
      "author_id": "542bff0c10ab5791322617c7",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>从Node.js客户端调用科大讯飞API.</p>\n<blockquote>\n<p>仅支持Linux64, 仅支持听写接口</p>\n</blockquote>\n<p>Read <code>https://www.npmjs.com/package/xfy-node</code>.</p>\n<p><img src=\"https://raw.githubusercontent.com/Samurais/xfy-node-getstarted/master/resources/1.png\" alt></p>\n<h2>准备工作</h2>\n<pre class=\"prettyprint\"><code>git clone git@github.com:Samurais&#x2F;xfy-node-getstarted.git\ncd resources\nsudo unzip xfyun_Linux_voice_1135_5864ae2d.zip -d &#x2F;opt&#x2F;xfy-sdk\n</code></pre><h2>资源文件</h2>\n<p><strong>data.vioces</strong></p>\n<p>*.silk 文件 - N/A\n*.wav 文件 - 16k, 单通道\n*.flac 文件 - 22k, 单通道</p>\n<h2>测试</h2>\n<pre class=\"prettyprint\"><code>cd xfy-node-getstarted\nnpm install\nnode index.js\n</code></pre><h2>解释</h2>\n<pre class=\"prettyprint\"><code>const xfyclient = require(&#x27;xfy-node&#x27;);\nlet file_name = &quot;pro_16k&#x2F;627b62fb776f833bad37efaf55954e1f_16.wav&quot;;\nlet params = {\n    username: null, &#x2F;&#x2F; 账号名称\n    password: null, &#x2F;&#x2F; 账号密码 \n    appid: &#x27;5864ae2d&#x27;, &#x2F;&#x2F; AppID\n    &#x2F;&#x2F; 语言\n    &#x2F;&#x2F; zh_cn:简体中文\n    &#x2F;&#x2F; zh_tw:繁体中文\n    &#x2F;&#x2F; en_us:英语\n    &#x2F;&#x2F; 默认为zh_cn\n    lang: &#x27;en_us&#x27;,\n    &#x2F;&#x2F; 口音\n    &#x2F;&#x2F; mandarin:普通话\n    &#x2F;&#x2F; cantonese:粤语\n    &#x2F;&#x2F; 默认为mandarin\n    accent: &#x27;mandarin&#x27;,\n    &#x2F;&#x2F; 音频格式\n    &#x2F;&#x2F; 8000, 16000, 默认为16000\n    sample_rate: 16000,\n    &#x2F;&#x2F; 音频文件位置，绝对路径\n    audio_file: &#96;&#x2F;home&#x2F;hain&#x2F;git&#x2F;xfy-node-getstarted&#x2F;data.vioces&#x2F;${file_name}&#96;\n}\n\nxfyclient.iat(params) &#x2F;&#x2F; 返回Promise\n\t.then(function (result) {\n\t    console.log(&#x27;result&#x27;, result);\n\t}, function(err){\n\t    console.log(&#x27;err&#x27;, err);\n\t});\n</code></pre><h2>Trouble Shooting</h2>\n<h3>转码</h3>\n<blockquote>\n<p>官方案例的数据格式: sox --info wav/iflytek01.wav</p>\n</blockquote>\n<pre class=\"prettyprint\"><code>Input File     : &#x27;wav&#x2F;iflytek01.wav&#x27;\n\nChannels       : 1\n\nSample Rate    : 16000\n\nPrecision      : 16-bit\n\nDuration       : 00:00:04.36 = 69699 samples ~ 326.714 CDDA sectors\n\nFile Size      : 139k\n\nBit Rate       : 256k\n\nSample Encoding: 16-bit Signed Integer PCM\n</code></pre><ul>\n<li>批量转码</li>\n</ul>\n<pre class=\"prettyprint\"><code>cd data.vioces\nfind . -name &quot;*.wav&quot; -print0 | xargs -0 -I file sox file -r 16000 pro_16k&#x2F;file\n</code></pre></div>",
      "title": "Node.js 科大讯飞 听写接口",
      "last_reply_at": "2017-01-11T11:38:20.496Z",
      "good": false,
      "top": false,
      "reply_count": 0,
      "visit_count": 57,
      "create_at": "2017-01-11T11:38:20.496Z",
      "author": {
        "loginname": "Samurais",
        "avatar_url": "https://avatars.githubusercontent.com/u/3538629?v=3&s=120"
      }
    },
    {
      "id": "5867d50d5eac96bb04d3e302",
      "author_id": "58410a123aa1310a578687c1",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>上次分享了一道题，大家反响不错，很开心自己写的东西有人愿意花时间去看，也给了自己莫大的鼓舞，其实做题虽然不比真正的编程，但是也能够让你发现一些你之前没有注意到的语言层面的问题。所以，这次再分享一道稍微有难度的JavaScript题目。</p>\n<pre class=\"prettyprint language-javascript\"><code>function Foo() {\n    getName = function () { \n    \tconsole.log(&#x27;1&#x27;);\n    };\n    return this;\n}\nFoo.getName = function () {\n\tconsole.log(&#x27;2&#x27;);\n};\nFoo.prototype.getName = function () { \n\tconsole.log(&#x27;3&#x27;);\n};\nvar getName = function () { \n\tconsole.log(&#x27;4&#x27;);\n};\nfunction getName() { \n\tconsole.log(5);\n}\n\nFoo.getName();  \ngetName();\t\nFoo().getName(); \ngetName();  \nnew Foo.getName(); \nnew Foo().getName();   \nnew new Foo().getName();\t\t\n</code></pre><p>请问上述代码在浏览器环境下，输出结果是多少？\n　　 揭晓一下最终答案:</p>\n<pre class=\"prettyprint language-javascript\"><code>2 4 1 1 2 3 3\n</code></pre><p>前四道难度不是很大，主要是后三道，基本是全军覆没，感叹实在是太绕了了。后面慢慢分析了一下，逐个讲一下吧。\n　　首先必须注意一个问题</p>\n<pre class=\"prettyprint language-javascript\"><code>function Foo() {\n    getName = function () { \n    \tconsole.log(&#x27;1&#x27;);\n    };\n    return this;\n}\n</code></pre><p>在函数内部声明的<code>getName</code>变量，前面是不带有<code>var</code>、<code>let</code>,<code>const</code>的，所以其实根据<strong>LHS</strong>(这个的介绍可以去的我博客看一下关于LHS和RHS的总结)，声明的<code>getName</code>是在全局范围内(也是就<code>window</code>)。\n　　其次需要明确你是否知道下面代码在浏览器中的执行结果：</p>\n<pre class=\"prettyprint language-javascript\"><code>var getName = function () { \n\tconsole.log(&#x27;4&#x27;);\n};\nfunction getName() { \n\tconsole.log(5);\n}\ngetName();\n</code></pre><p>上述代码的执行结果是:<code>4</code>。原因是这样的，<code>var</code>声明的变量和函数声明<code>function</code>都会被提升，但是函数声明的提升的级别是比\n<code>var</code>要高的，所以上面的代码的实际执行结果是：</p>\n<pre class=\"prettyprint language-javascript\"><code>function getName() { \n\tconsole.log(5);\n}\nvar getName = function () { \n\tconsole.log(&#x27;4&#x27;);\n};\ngetName();\n</code></pre><p>后一个函数表达式<code>getName</code>覆盖了前面的函数声明<code>getName</code>,实际执行的是函数表达式（也就是是为什么JavaScript永远不会有函数重载这么一说了），所以输出的是<code>4</code>。\n　　首先我给下面的代码添加一下必要的注释：</p>\n<pre class=\"prettyprint language-javascript\"><code>&#x2F;&#x2F;函数声明\nfunction Foo() {\n    &#x2F;&#x2F;全局变量\n    getName = function () { \n    \tconsole.log(&#x27;1&#x27;);\n    };\n    return this;\n}\n&#x2F;&#x2F;为函数添加属性getName,其类型是Function，所以这里也可以看出来，Function也是一种Object\nFoo.getName = function () {\n\tconsole.log(&#x27;2&#x27;);\n};\n&#x2F;&#x2F;为Foo的原型添加方法getName\nFoo.prototype.getName = function () { \n\tconsole.log(&#x27;3&#x27;);\n};\nvar getName = function () { \n\tconsole.log(&#x27;4&#x27;);\n};\nfunction getName() { \n\tconsole.log(5);\n}\n</code></pre><p>下面执行第一条语句：</p>\n<pre class=\"prettyprint language-javascript\"><code>Foo.getName();  \n</code></pre><p>函数<code>Foo</code>本身并没有执行，执行的是函数的属性<code>getName</code>，当然输出的是：<code>2</code>.\n　　接下来执行：</p>\n<pre class=\"prettyprint language-javascript\"><code>getName();\t\n</code></pre><p>这是在全局范围内执行了<code>getName()</code>，有两条对应的<code>getName</code>的声明，根据前面我们所提到的提升的级别来看实际执行是函数表达式：</p>\n<pre class=\"prettyprint language-javascript\"><code>var getName = function () { \n\tconsole.log(&#x27;4&#x27;);\n};\n</code></pre><p>所以输出的是<code>4</code>。\n　　接下来执行</p>\n<pre class=\"prettyprint language-javascript\"><code>Foo().getName(); \n</code></pre><p>首先看一下JavaScript的操作符优先级,从高到低排序\n<img src=\"http://oj232uzqf.bkt.clouddn.com/operator_error.png\" alt=\"此处输入图片的描述\">\n　　从上面可以看出来<code>()</code>与<code>.</code>优先级相同，所以<code>Foo().getName()</code>从左至右执行。首先运行<code>Foo()</code>,全局的<code>getName</code>被覆盖成输出<code>console.log('1')</code>,并且返回的<code>this</code>此时代表的是<code>window</code>。随后相当于执行的<code>window.getName()</code>,那么输出的实际就是<code>1</code>(被覆盖)。\n　　下面到了</p>\n<pre class=\"prettyprint language-javscrpit\"><code>getName();  \n</code></pre><p>这个不用说了，执行的还是：<code>1</code>(和上面一毛一样)。\n　　下面到了三个最难的部分：</p>\n<pre class=\"prettyprint language-javascript\"><code>new Foo.getName();\n</code></pre><p>对于这条语句的执行，有两种可能：</p>\n<pre class=\"prettyprint language-javascript\"><code>(new Foo).getName()\n</code></pre><p>或</p>\n<pre class=\"prettyprint language-javascript\"><code>new (Foo.getName)()\n</code></pre><p>但是我们根据操作符优先级表可以得知，其实上<code>.</code>操作符要比<code>new</code>优先级要高，所以实际执行的是第二种，所以是对</p>\n<pre class=\"prettyprint language-javascript\"><code>Foo.getName = function () {\n\tconsole.log(&#x27;2&#x27;);\n};\n</code></pre><p>函数执行了<code>new</code>操作，当然输出的是<code>2</code>。\n下面到了执行</p>\n<pre class=\"prettyprint language-javascript\"><code>new Foo().getName();   \n</code></pre><p>这个语句的可能性也有两种：</p>\n<pre class=\"prettyprint language-javascit\"><code>(new Foo()).getName();\n</code></pre><p>或者</p>\n<pre class=\"prettyprint language-javascript\"><code>new (Foo().getName)();\n</code></pre><p>那么应该是那种的呢？原来我以为会是第二种的执行方式，后面通过浏览器调试发现真实的执行的方式是第一种。我看到题目的作者是这么解释的：</p>\n<blockquote>\n<p>首先看运算符优先级括号高于new。实际执行为(new Foo()).getName()。遂先执行Foo函数。</p>\n</blockquote>\n<p>我觉得上面的解释是有问题的，对比上面两种执行方式，第一种是先执行<code>new</code>，然后执行的是<code>.</code>操作符，然后执行的是<code>()</code>。第二种是先执行了<code>()</code>,再执行的是<code>.</code>，最后执行<code>new</code>操作符。如果真的按照引用所说的用优先级的方式判别，其实恰恰应该执行的是第二种而不是第一种。\n　　后来总算找到原因了，原来之前那个出现的比较多的JavaScript优先级的表并不完整，万能的MDN给出了最权威的JavaScript优先级表<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">运算符优先级</a>\n　　我列举出最重要的部分（由高到低）：\n　　<img src=\"http://oj232uzqf.bkt.clouddn.com/operator.png\" alt=\"优先级表格\">\n　　所以带参数的<code>new</code>操作符是优先级最高的，这下就没有问题了，执行顺序确实应该是第一种。\n　　那么按照<code>(new Foo()).getName();</code>来执行，情况就就很简单了，<code>(new Foo())</code>返回了新生成的对象，该对象没有<code>getName()</code>方法，所以在<code>prototype</code>中找到了<code>getName()</code>方法。所以输出的是<code>3</code>。\n　　胜利就在眼前，我们看一下最后一问。</p>\n<pre class=\"prettyprint language-javascript\"><code>new new Foo().getName();\t\t\n</code></pre><p>和上一步一样的方法，我们按照优先级表给分析一下这个语句到底是怎么执行的。\n　　首先带参数的<code>new</code>操作符优先级最高，第一步划分为：</p>\n<pre class=\"prettyprint language-javacript\"><code>new (new Foo().getName)();\n</code></pre><p>第二步划分为：</p>\n<pre class=\"prettyprint language-javascript\"><code>new ((new Foo()).getName)();\n</code></pre><p>所以执行<code>(new Foo()).getName</code>这个函数是对应的Foo.prototype.getName,所以执行<code>new (Foo.prototype.getName)()</code>肯定输出的是<code>3</code>。\n　　哈哈哈，这么难得题终于解决了，开心~总结一下吧，首先JavaScript知识最好去MDN去查，万一别的地方写错了真的是害人不浅。其次，如果在写代码的时候还是少利用操作符优先级这种东西，一旦不明确的地方就立刻用<code>()</code>，代码的可阅读性真的是很重要！很重要！很重要！毕竟代码还是给人看~\n　　如果有写的不正确的地方，欢迎大家指出，资历深浅，请多指教。欢迎大家去围观我的博客呀 <a href=\"https://mrerhu.github.io\">https://mrerhu.github.io</a></p>\n</div>",
      "title": "一道颇有难度的JavaScript题",
      "last_reply_at": "2017-01-11T11:27:57.126Z",
      "good": true,
      "top": false,
      "reply_count": 13,
      "visit_count": 1541,
      "create_at": "2016-12-31T15:55:57.171Z",
      "author": {
        "loginname": "MrErHu",
        "avatar_url": "https://avatars.githubusercontent.com/u/16449143?v=3&s=120"
      }
    },
    {
      "id": "586823335eac96bb04d3e305",
      "author_id": "56d79f63eb15c16918d8f798",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><h2>webpack异步加载的原理</h2>\n<p>webpack ensure相信大家都听过。有人称它为异步加载，也有人说做代码切割，那这\n个家伙到底是用来干嘛的？其实说白了，它就是把js模块给独立导出一个.js文件的，然后使用这个\n模块的时候，webpack会构造script dom元素，由浏览器发起异步请求这个js文件。</p>\n<p>场景分析:</p>\n<p>比如应用的首页里面有个按钮，点击后可以打开某个地图。打开地图的话就要利用百度地图的js,于是\n我们不得不在首页中把百度地图的js一起打包进去首页,一个百度地图的js文件是非常大的，假设为\n1m，于是就造成了我们首页打包的js非常大，用户打开首页的时间就比较长了。</p>\n<p>有没有什么好的解决方法呢？</p>\n<p><strong>解决1</strong></p>\n<p>既然打包成同一个js非常大的话，那么我们完全可以把百度地图js分类出去，利用浏览器的并发请求\njs文件处理，这样的话，会比加载一个js文件时间小得多。嗯，这也是个不错的方案。为baidumap.js\n配置一个新的入口就行了，这样就能打包成两个js文件，都插入html即可（如果baidumap.js被多个\n入口文件引用的话，也可以不用将其设置为入口文件，而且直接利用CommonsChunkPlugin,导出到一个\n公共模块即可）可以参考我之前文章\n<a href=\"https://github.com/yongningfu/webpack_package\">webpack模块打包</a></p>\n<p>那还有没有更好的解决方案呢？</p>\n<p><strong>解决2</strong></p>\n<p>当然还是有的！我们细想，百度地图是用户点击了才弹出来的，也就是说，这个功能是可选的。那么解决\n方案就来了，能不能在用户点击的时候，我在去下载百度地图的js.当然可以。那如何实现用户点击的时候\n再去下载百度地图的js呢？于是，我们可以写一个按钮的监听器</p>\n<pre class=\"prettyprint language-js\"><code>mapBtn.click(function() {\n  &#x2F;&#x2F;获取 文档head对象\n  var head = document.getElementsByTagName(&#x27;head&#x27;)[0];\n  &#x2F;&#x2F;构建 &lt;script&gt;\n  var script = document.createElement(&#x27;script&#x27;);\n  &#x2F;&#x2F;设置src属性\n  script.async = true;\n  script.src = &quot;http:&#x2F;&#x2F;map.baidu.com&#x2F;.js&quot;\n  &#x2F;&#x2F;加入到head对象中\n  head.appendChild(script);\n})\n</code></pre><p>上面的几行代码对大家来说都不难。可以在点击的时候，才加载百度地图，等百度地图加载完成后，在\n利用百度地图的对象去执行我们的操作。ok，讲到这里webpack.ensure的原理也就讲了一大半了。\n它就是 <strong>把一些js模块给独立出一个个js文件，然后需要用到的时候，在创建一个script对象，加入\n到document.head对象中即可</strong>，浏览器会自动帮我们发起请求，去请求这个js文件，在写个回调，去\n定义得到这个js文件后，需要做什么业务逻辑操作。</p>\n<p>ok,那么我们就利用webpack的api去帮我们完成这样一件事情。点击后才进行异步加载百度地图js，上面\n的click加载js时我们自己写的，webpack可以轻松帮我们搞定这样的事情，而不用我们手写</p>\n<pre class=\"prettyprint language-js\"><code>mapBtn.click(function() {\n  require.ensure([], function() {\n    var baidumap = require(&#x27;.&#x2F;baidumap.js&#x27;) &#x2F;&#x2F;baidumap.js放在我们当前目录下\n  })\n})\n</code></pre><p>搞定！当然还是分析一下。require.ensure这个函数是一个代码分离的分割线，表示 回调里面的require\n是我们想要进行分割出去的，即require(’./baidumap.js’)，把baidumap.js分割出去，形成一个\nwebpack打包的单独js文件。当然ensure里面也是可以写一些同步的require的，比如</p>\n<pre class=\"prettyprint language-js\"><code>\nvar sync = require(&#x27;syncdemo.js&#x27;)   &#x2F;&#x2F;下面ensure里面也用到\n\nmapBtn.click(function() {\n  require.ensure([], function() {\n    var baidumap = require(&#x27;.&#x2F;baidumap.js&#x27;) &#x2F;&#x2F;baidumap.js放在我们当前目录下\n    var sync = require(&#x27;syncdemo.js&#x27;)  &#x2F;&#x2F;这个不会独立出去，因为它已经加载到模块缓存中了\n  })\n})\n</code></pre><p>也就是说，ensure会把没有使用过的require资源进行独立分成成一个js文件. require.ensure的\n第一个参数是什么意思呢？[], 其实就是 当前这个 require.ensure所依赖的其他 异步加载的模块。你想啊？如果A 和 B都是异步加载的，B中需要A，那么B下载之前，是不是先要下载A啊？，所以ensure的第一个参数[]\n是它依赖的异步模块，但是这里需要注意的是，webpack会把参数里面的依赖<strong>异步模块</strong>和当前的需要分离出去的异步模块给一起打包成同一个js文件，这里可能会出现一个重复打包的问题， 假设A 和 B都是异步的， ensure A 中依赖B，ensure B中 依赖A，那么会生成两个文件，都包含A和B模块。 如果想加载A require.ensure([‘A.js’],function) 即可</p>\n<p>说完了上面的原理。下面就实践一下</p>\n<p><img src=\"//dn-cnode.qbox.me/FpR_38m6AJyF7yS2gtLcxX7GbvDh\" alt=\"img1.gif\"></p>\n<p>entry.js 依赖三个 js。</p>\n<ul>\n<li>Abtn-work.js 是封装了 abtn按钮点击后，才执行的业务逻辑</li>\n<li>Bbtn-work.js 是封装了 bbtn按钮点击后，才执行的业务逻辑</li>\n<li>util.js 是封装了 entry.js需要利用的工具箱</li>\n</ul>\n<p>针对上面的需求，<strong>优化方案</strong></p>\n<p>假设 Abtn-work.js Bbtn-work.js util.js都是非常大的文件\n因为 Abtn-work.js Bbtn-work.js 都不是entry.js必须有的，即可能发生的操作，那么我们把\n他们利用异步加载，当发生的时候再去加载就行了</p>\n<p>util.js是entry.js立即马上依赖的工具箱。但是它又非常的大，所以将其配置打包成一个公共模块，\n利用浏览器的并发加载，加快下载速度。ok,构思完成，开始实现</p>\n<p>index.html</p>\n<pre class=\"prettyprint language-html\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;index&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;aBtn&quot;&gt;Abtn&lt;&#x2F;div&gt;\n    &lt;div id=&quot;bBtn&quot;&gt;Bbtn&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n</code></pre><p>定义了两个buttom</p>\n<p>然后看看 entry.js</p>\n<pre class=\"prettyprint language-js\"><code>\nvar util_sync = require(&#x27;.&#x2F;util-sync.js&#x27;)\n\nalert(util_sync.data)\n\ndocument.getElementById(&quot;aBtn&quot;).onclick = function() {\n\n  require.ensure([], function() {\n    var awork = require(&#x27;.&#x2F;workA-async.js&#x27;)\n    alert(awork.data)\n    &#x2F;&#x2F;异步里面再导入同步模块--实际是使用同步中的模块\n    var util1 = require(&#x27;.&#x2F;util-sync.js&#x27;)\n  })\n}\n\ndocument.getElementById(&quot;bBtn&quot;).onclick = function() {\n\n  require.ensure([], function() {\n    var bwork = require(&#x27;.&#x2F;workB-async.js&#x27;)\n    alert(bwork.data)\n  })\n}\n</code></pre><p>可以看到，workA-async.js， workB-async.js 都是点击后才ensure进来的。什么时候加载完成呢？\n就是 require.ensure() 第二个函数参数，即回调函数，它表示当下载js完成后，发生的因为逻辑</p>\n<p>webpack打包后，形成</p>\n<p><img src=\"//dn-cnode.qbox.me/FiZo5bwOvaczWrZaQQ329ynuQs8H\" alt=\"img2.gif\"></p>\n<p>其实， 1.1…  2.2…就是我们ensure导出来的js文件</p>\n<p>我们看看代码是如何加载的执行的，点击打包插入js后的html</p>\n<p><img src=\"//dn-cnode.qbox.me/FiE5Xpg4_yuloz5CwXi74oPON5ye\" alt=\"img3.gif\"></p>\n<p>可以看到，并没有加载 ensure导出来的 1.1…js    2.2…js</p>\n<p>点击 abtn,</p>\n<p><img src=\"//dn-cnode.qbox.me/FlY9xZryWzGNdrQaBoEEKdnK2UuK\" alt=\"img4.gif\"></p>\n<p>发现浏览器下载并加载了 1.1…js</p>\n<p>点击 bbtn</p>\n<p><img src=\"//dn-cnode.qbox.me/FjzTfRIKddlNl0RPU-vLKhurIkmb\" alt=\"img5.gif\">\n发现浏览器下载并加载了 2.2…js</p>\n<p>ok 全部完成</p>\n<p><strong>喜欢的话 欢迎star</strong></p>\n</div>",
      "title": "webpack代码分离 ensure 看了还不懂，你打我",
      "last_reply_at": "2017-01-11T10:51:50.823Z",
      "good": true,
      "top": false,
      "reply_count": 7,
      "visit_count": 677,
      "create_at": "2016-12-31T21:29:23.802Z",
      "author": {
        "loginname": "yongningfu",
        "avatar_url": "https://avatars.githubusercontent.com/u/9846613?v=3&s=120"
      }
    },
    {
      "id": "587250387dc832f33ab5783d",
      "author_id": "57346bbf32bf2c90579f529f",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>如题。\n<img src=\"//dn-cnode.qbox.me/FmGL9L-OzyjxEuDSsxz8D63WwHp5\" alt=\"裸奔的后果.png\"></p>\n<p>来自酷炫的 <a href=\"https://github.com/TakWolf/CNode-Material-Design\">CNodeMD</a></p>\n</div>",
      "title": "大家有阿里云上的mongodb数据库数据被莫名清空的情况吗？",
      "last_reply_at": "2017-01-11T10:40:19.579Z",
      "good": false,
      "top": false,
      "reply_count": 26,
      "visit_count": 620,
      "create_at": "2017-01-08T14:44:08.194Z",
      "author": {
        "loginname": "dpc761218914",
        "avatar_url": "https://avatars.githubusercontent.com/u/16233212?v=3&s=120"
      }
    },
    {
      "id": "587602982967eeb01aafe688",
      "author_id": "567ff12775ab9058220466a8",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>nodejs 有rocketmq的client模块吗？</p>\n</div>",
      "title": "nodejs 有rocketmq的client模块吗？",
      "last_reply_at": "2017-01-11T10:22:24.350Z",
      "good": false,
      "top": false,
      "reply_count": 1,
      "visit_count": 45,
      "create_at": "2017-01-11T10:02:00.838Z",
      "author": {
        "loginname": "wdragon1983",
        "avatar_url": "https://avatars.githubusercontent.com/u/12229436?v=3&s=120"
      }
    },
    {
      "id": "5875d3362d086de6340db34c",
      "author_id": "573212537abbbd520cb244b3",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>为什么这样转出来的不对呢。</p>\n<pre class=\"prettyprint\"><code>const opts = {\n\turl: &#x27;http:&#x2F;&#x2F;www.coolaf.com&#x2F;static&#x2F;img&#x2F;s.png&#x27;\n}\n\nvar [err, response] = yield request.get(opts)\n\nvar base64 = Buffer.from(response.bod, &#x27;binary&#x27;).toString(&#x27;base64&#x27;)\n</code></pre><p>之前答案就在眼前竟然没点开。。。汗\n<a href=\"https://segmentfault.com/a/1190000002787763\">解决方法</a></p>\n</div>",
      "title": "图片怎么转base64？(已解决）",
      "last_reply_at": "2017-01-11T09:56:19.393Z",
      "good": false,
      "top": false,
      "reply_count": 11,
      "visit_count": 256,
      "create_at": "2017-01-11T06:39:50.968Z",
      "author": {
        "loginname": "dlyt",
        "avatar_url": "https://avatars.githubusercontent.com/u/18431616?v=3&s=120"
      }
    },
    {
      "id": "5629c84ee6a3804c5815918d",
      "author_id": "4efc278525fa69ac69000077",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>原文地址：<a href=\"https://github.com/fundon/fundon.github.io/issues/19\">Using Docker Compose in Node.js Project</a></p>\n<h2>Why use Docker Compose?</h2>\n<h3>Docker 到底有什么优点吸引我们？</h3>\n<ul>\n<li><strong>Build</strong>：允许自由组合各种服务来构建我们的应用，避免<strong>开发</strong>和<strong>生产</strong>之间的环境问题，并且不局限在任何平台和语言</li>\n<li><strong>Ship</strong>：通过统一的用户接口，管理，设计应用开发、测试、发布的生命周期</li>\n<li><strong>Run</strong>：可以快捷地在多个平台，发布可扩展、安全、可靠的服务</li>\n</ul>\n<h3>Use it!</h3>\n<p>说了这么多，那就让我们玩起来！</p>\n<h4>0. Install <a href=\"https://docs.docker.com\">Docker</a> Tools</h4>\n<pre class=\"prettyprint language-sh\"><code>$ brew install docker docker-machine docker-compose\n$ docker help\n</code></pre><ul>\n<li>\n<p><a href=\"https://docs.docker.com\">Docker</a> - 开源的容器应用引擎</p>\n</li>\n<li>\n<p><a href=\"https://docs.docker.com/machine/\">Machine</a> - 管理本地、云服务提供商中的 Docker 服务</p>\n</li>\n<li>\n<p><a href=\"https://docs.docker.com/compose/\">Compose</a> - 定义，组合，运行多个容器应用</p>\n</li>\n</ul>\n<p><strong>NOTE</strong>:</p>\n<ul>\n<li>如果是 Mac OS X 用户，请先安装 Virtualbox <code>brew cask install virtualbox</code>。</li>\n<li>如果不喜欢 Docker CLI 工具，也可以安装 <a href=\"https://docs.docker.com/kitematic/\">Kitematic</a>，Kitematic 是 Docker 的 GUI 管理工具。</li>\n</ul>\n<h4>1. Create Node.js Project</h4>\n<pre class=\"prettyprint language-sh\"><code>$ mkdir docker-express-mongoose-redis-example &amp;&amp; npm init\n$ npm i express express-session connect-redis ioredis mongoose --save\n$ touch server.js \n</code></pre><p><strong><em>server.js</em></strong></p>\n<pre class=\"prettyprint language-javascript\"><code>&#x2F;&#x2F; Import modules\nconst express = require(&#x27;express&#x27;)\nconst session = require(&#x27;express-session&#x27;)\nconst ioredis = require(&#x27;ioredis&#x27;)\nconst RedisStore = require(&#x27;connect-redis&#x27;)(session)\nconst mongoose = require(&#x27;mongoose&#x27;)\n\n&#x2F;&#x2F; Create App\nconst app = express()\n\n&#x2F;&#x2F; Redis Client\nconst client = ioredis.createClient(6379, process.env.REDIS_PORT_6379_TCP_ADDR)\n\n&#x2F;&#x2F; Compose Schema\nconst ComposeSchema = new mongoose.Schema({\n  name:  String,\n  build: String,\n  ports: [String]\n})\n\n&#x2F;&#x2F; Compose Model\nconst Compose = mongoose.model(&#x27;Compose&#x27;, ComposeSchema) \n\n&#x2F;&#x2F; Create Session\napp.use(session({\n  store: new RedisStore({ client }),\n  secret: &#x27;Dream&#x27;\n}))\n\n&#x2F;&#x2F; Routes for redis\napp.get(&#x27;&#x2F;redis&#x27;, (req, res) =&gt; {\n  res.send(&#x27;Redis is live!&#x27;)\n})\napp.get(&#x27;&#x2F;redis&#x2F;set&#x27;, (req, res) =&gt; {\n  client.set(&#x27;key&#x27;, &#x27;Redis is live!&#x27;);\n  res.send(&#96;It&#x27;s redis.&#96;)\n})\napp.get(&#x27;&#x2F;redis&#x2F;get&#x27;, (req, res) =&gt; {\n  client.get(&#x27;key&#x27;).then(result =&gt; {\n    res.send(result || &#x27;Nothing!&#x27;)\n  })\n})\n\n&#x2F;&#x2F; Routes for redis\napp.get(&#x27;&#x2F;mongoose&#x27;, (req, res) =&gt; {\n  res.send(&#x27;Mongoose is live!&#x27;)\n})\napp.get(&#x27;&#x2F;mongoose&#x2F;set&#x27;, (req, res) =&gt; {\n  var c = new Compose({\n    name: &#x27;docker&#x27;,\n    build: &#x27;.&#x27;,\n    ports: [&#x27;3000:3000&#x27;]\n  })\n\n  c.save().then(() =&gt; {\n      res.send(&#96;It&#x27;s mongoose.&#96;);\n    })\n})\napp.get(&#x27;&#x2F;mongoose&#x2F;get&#x27;, (req, res) =&gt; {\n  Compose\n    .find({ name: &#x27;docker&#x27; })\n    .then((result) =&gt; {\n      res.send(result)\n    })\n})\n\napp.use((req, res) =&gt; {\n  res.send(&#x27;Hello Docker, Express, Mongoose, Redis!&#x27;)\n})\n\nmongoose.connect(&#96;mongodb:&#x2F;&#x2F;${process.env.MONGO_PORT_27017_TCP_ADDR}&#96;, (err) =&gt; {\n  if (err) throw err\n\n  &#x2F;&#x2F; Start App\n  app.listen(process.env.PORT || 3000)\n})\n</code></pre><p><strong><em>package.json</em></strong></p>\n<pre class=\"prettyprint language-js\"><code>{\n  &quot;name&quot;: &quot;docker-express-mongoose-redis-example&quot;,\n  &quot;private&quot;: true,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node server.js&quot;\n  },\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {\n    &quot;connect-redis&quot;: &quot;^3.0.1&quot;,\n    &quot;express&quot;: &quot;^4.13.3&quot;,\n    &quot;express-session&quot;: &quot;^1.11.3&quot;,\n    &quot;ioredis&quot;: &quot;^1.9.1&quot;,\n    &quot;mongoose&quot;: &quot;^4.2.0&quot;\n  }\n}\n</code></pre><h4>2. <a href=\"https://docs.docker.com/machine/\">Machine</a>：在 virtualbox 中创建 Docker Host</h4>\n<pre class=\"prettyprint language-sh\"><code>$ # 查看命令行帮助\n$ docker-machine\n$ # 创建 Docker Host\n$ docker-machine create -d virtualbox dev\n$ # 启动\n$ docker-machine start dev\n$ # 查看 dev IP\n$ docker-machine ip dev\n$ # 查看 dev 环境变量\n$ docker-machine env dev\n$ # 设置环境变量\n$ eval &quot;$(docker-machine env dev)&quot;\n</code></pre><h4>3. <a href=\"https://docs.docker.com/compose/\">Compose</a>：定义及操作</h4>\n<h5>为项目创建 <a href=\"https://docs.docker.com/reference/builder/\">Dockerfile</a></h5>\n<pre class=\"prettyprint language-sh\"><code>$ cd docker-express-mongoose-redis-example\n$ touch Dockerfile\n</code></pre><p><strong><em>Dockerfile</em></strong></p>\n<pre class=\"prettyprint language-Dockerfile\"><code>FROM mhart&#x2F;alpine-node\n# FROM mhart&#x2F;alpine-node:base\n# FROM mhart&#x2F;alpine-node:base-0.10\n\nWORKDIR &#x2F;src\nADD . .\n\n# If you have native dependencies, you&#x27;ll need extra tools\nRUN apk add --update make gcc g++ python\n\n# If you need npm, don&#x27;t use a base tag\nRUN npm install\n\n# If you had native dependencies you can now remove build tools\nRUN apk del make gcc g++ python &amp;&amp; \\\n  rm -rf &#x2F;tmp&#x2F;* &#x2F;var&#x2F;cache&#x2F;apk&#x2F;* &#x2F;root&#x2F;.npm &#x2F;root&#x2F;.node-gyp\n\nEXPOSE 3000\nCMD [&quot;npm&quot;, &quot;start&quot;]\n</code></pre><h5>创建 <a href=\"https://docs.docker.com/compose/yml\">docker-compose.yml</a> 来组合 Node.js, Redis, Mongodb 服务</h5>\n<pre class=\"prettyprint language-sh\"><code>$ cd docker-express-mongoose-redis-example\n$ touch docker-compose.yml\n</code></pre><p><strong><em>Dockerfile</em></strong></p>\n<pre class=\"prettyprint language-yaml\"><code>app:\n  build: .\n  volumes:\n    - .:&#x2F;src\n  links:\n    - mongo\n    - redis\n  ports:\n    - 3000:3000\n\nredis:\n  image: redis\n\nmongo:\n  image: mongo\n</code></pre><pre class=\"prettyprint language-sh\"><code>$ # 查看命令行帮助\n$ docker-compose\n$ # 创建\n$ docker-compose build\n$ # 启动 app, redis, mongo 等服务，特点是常驻前台\n$ docker-compose up\n$ # 也可以通过 &#96;start&#96; 启动，特点是常驻在后台\n$ docker-compose start\n$ # 停止服务\n$ docker-compose stop\n$ # 输出日志\n$ docker-compose logs\n</code></pre><h5>测试、访问我们的服务 :rocket:</h5>\n<pre class=\"prettyprint language-sh\"><code>$ open &quot;http:&#x2F;&#x2F;$(docker-machine ip dev):3000&quot;\n$ open &quot;http:&#x2F;&#x2F;$(docker-machine ip dev):3000&#x2F;redis&quot;\n$ open &quot;http:&#x2F;&#x2F;$(docker-machine ip dev):3000&#x2F;redis&#x2F;set&quot;\n$ open &quot;http:&#x2F;&#x2F;$(docker-machine ip dev):3000&#x2F;redis&#x2F;get&quot;\n$ open &quot;http:&#x2F;&#x2F;$(docker-machine ip dev):3000&#x2F;mongoose&quot;\n$ open &quot;http:&#x2F;&#x2F;$(docker-machine ip dev):3000&#x2F;mongoose&#x2F;set&quot;\n$ open &quot;http:&#x2F;&#x2F;$(docker-machine ip dev):3000&#x2F;mongoose&#x2F;get&quot;\n</code></pre><h4>关闭服务，休闲下</h4>\n<pre class=\"prettyprint language-sh\"><code>$ docker-compose stop\n$ docker-machine stop dev\n</code></pre><p><strong>NOTE</strong>:</p>\n<ul>\n<li>\n<p>Compose 的前身是 <strong>fig</strong>。</p>\n</li>\n<li>\n<p><code>up</code> <code>start</code> <code>logs</code> <code>stop</code> <code>rm</code> 等 COMMANDs 可以针对某个 Container 使用 e.g: <code>$ docker-compose logs app</code></p>\n</li>\n<li>\n<p><strong>如果 Node 项目比较大，依赖的模块较多，频繁改动，我们可以不需要创建 Node 项目本身的 Container，只需要创建启动其他服务即可。</strong></p>\n</li>\n</ul>\n<h3>其他工具</h3>\n<ul>\n<li><a href=\"https://www.vagrantup.com\">Vargant</a> - 也是一款环境构建工具，比 Docker 还早</li>\n</ul>\n<p>Vargant 是一款不错的工具，可以帮助我们快速搭建各种服务环境，也能团队之间进行分享，现在基于它的工具链也越来越丰富，感兴趣也可以一试。</p>\n<ul>\n<li>不用其他构建工具，我们自己搭</li>\n</ul>\n<p>“自己动手，丰衣足食” － 不依赖环境构建工具，自己搭，时间精力充足的化，不妨一试，会收获更多。</p>\n<h3>最后</h3>\n<p>Docker 可玩的不仅仅如此，还可以打包、发布容器应用到线上，构建自己的 Paas(<a href=\"https://github.com/progrium/dokku\">dokku</a>) 服务等。</p>\n<p>Docker Compose 也可以有更高级玩法。</p>\n<p>Enjoy!</p>\n<pre class=\"prettyprint language-javascript\"><code>{\n  github: &#x27;@fundon&#x27;,\n  email: &#x27;cfddream#gmail.com&#x27;,\n  twitter: &#x27;@_fundon&#x27;\n}\n</code></pre><h3>Relates</h3>\n<ul>\n<li><a href=\"https://docs.docker.com/kitematic/\">https://docs.docker.com/kitematic/</a></li>\n<li><a href=\"https://docs.docker.com/installation/mac/\">https://docs.docker.com/installation/mac/</a></li>\n<li><a href=\"https://docs.docker.com/machine/install-machine/\">https://docs.docker.com/machine/install-machine/</a></li>\n<li><a href=\"https://docs.docker.com/compose/install/\">https://docs.docker.com/compose/install/</a></li>\n<li><a href=\"https://github.com/mhart/alpine-node\">https://github.com/mhart/alpine-node</a></li>\n<li><a href=\"https://github.com/progrium/dokku\">https://github.com/progrium/dokku</a></li>\n</ul>\n</div>",
      "title": "Using Docker Compose in Node.js Project",
      "last_reply_at": "2017-01-11T09:52:32.974Z",
      "good": true,
      "top": false,
      "reply_count": 18,
      "visit_count": 3215,
      "create_at": "2015-10-23T05:40:30.410Z",
      "author": {
        "loginname": "fundon",
        "avatar_url": "https://avatars.githubusercontent.com/u/27926?v=3&s=120"
      }
    },
    {
      "id": "571e037dfa48138c41110d9f",
      "author_id": "538c599fc3ee0b5820134fee",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>基于 Noder.js + Mongodb，后台使用 AngularJS</p>\n<h3>Github</h3>\n<p><a href=\"https://github.com/welkinwong/nodercms\">https://github.com/welkinwong/nodercms</a></p>\n<h3>官网</h3>\n<p><a href=\"http://www.nodercms.com\">http://www.nodercms.com</a></p>\n<h3>演示</h3>\n<p><img src=\"//dn-cnode.qbox.me/FqTWLJhX1p8vW6yQCxQpYq59FRWo\" alt=\"管理后台.jpg\"></p>\n<ul>\n<li>地址：<a href=\"http://demo.nodercms.com\">http://demo.nodercms.com</a></li>\n<li>后台：<a href=\"http://demo.nodercms.com/admin\">http://demo.nodercms.com/admin</a></li>\n<li>账号：ghost@nodercms.com</li>\n<li>密码：123456</li>\n</ul>\n<h3>最近更新</h3>\n<p>v1.3.1\n媒体库支持文件类型\n内容支持插入文件\n推荐位支持插入文件\n内容模型扩展信息新增媒体类型\n推荐模型新增媒体类型</p>\n</div>",
      "title": "NoderCMS - 轻量级内容管理系统",
      "last_reply_at": "2017-01-11T09:52:02.880Z",
      "good": false,
      "top": false,
      "reply_count": 26,
      "visit_count": 2531,
      "create_at": "2016-04-25T11:46:05.172Z",
      "author": {
        "loginname": "WelkinWong",
        "avatar_url": "https://avatars.githubusercontent.com/u/6650440?v=3&s=120"
      }
    },
    {
      "id": "5875ec38aebe811e15c841be",
      "author_id": "50b5bc5d637ffa4155091236",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>按规则配置字段</p>\n<pre class=\"prettyprint language-C\"><code>var validRule=[\n&#x27;require&#x27;:[&#x27;email&#x27;,&#x27;password&#x27;],\n&#x27;email&#x27;:[&#x27;email&#x27;],\n...\n];\n</code></pre><p>分字段配置规则</p>\n<pre class=\"prettyprint\"><code>var validFields=[\n&#x27;username&#x27;:[&#x27;require&#x27;],\n&#x27;password&#x27;:[&#x27;require&#x27;],\n&#x27;email&#x27;:[&#x27;email&#x27;]\n]\n</code></pre><p>表单验证这两种方式那种更好一些?</p>\n</div>",
      "title": "表单验证,按规则来配置字段  vs 按字段配置规则",
      "last_reply_at": "2017-01-11T09:21:32.499Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 111,
      "create_at": "2017-01-11T08:26:32.907Z",
      "author": {
        "loginname": "yakczh",
        "avatar_url": "https://avatars.githubusercontent.com/u/6591466?v=3&s=120"
      }
    },
    {
      "id": "5874520d2d086de6340db2ed",
      "author_id": "53e47a3a71470ac0550b907e",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>像一些前端模板框架，有相对应的后端版本吗？\n比如Vue.js\n依旧是ejs和jade的天下吗？</p>\n</div>",
      "title": "2017年nodejs 可用到项目的模板引擎有哪些？",
      "last_reply_at": "2017-01-11T09:21:21.705Z",
      "good": false,
      "top": false,
      "reply_count": 12,
      "visit_count": 477,
      "create_at": "2017-01-10T03:16:29.670Z",
      "author": {
        "loginname": "x-da",
        "avatar_url": "https://avatars.githubusercontent.com/u/7136286?v=3&s=120"
      }
    },
    {
      "id": "587582c706fa6e2a4e4f72e3",
      "author_id": "572c54718783d212174bd765",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>项目中有人使用activity控制流程\n但是在node中还没发现类似的东西\n请问是node没有，还是可以通过别的方法实现，不需要？</p>\n</div>",
      "title": "node中有类似activity工作流引擎的东西吗？",
      "last_reply_at": "2017-01-11T08:55:59.264Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 200,
      "create_at": "2017-01-11T00:56:39.777Z",
      "author": {
        "loginname": "hezhongfeng",
        "avatar_url": "https://avatars.githubusercontent.com/u/12163050?v=3&s=120"
      }
    },
    {
      "id": "552a3a7ecd5ee87201ab1edc",
      "author_id": "52c25e798a716e0b15be3b89",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>使用mongoose, 进行数据查询</p>\n<blockquote>\n<pre class=\"prettyprint\"><code>Model.findOne( { _id: id }, function (err, callback ) )\n</code></pre></blockquote>\n<p>报错信息为：</p>\n<blockquote>\n<pre class=\"prettyprint\"><code>CastError: Cast to ObjectId failed for value\n</code></pre></blockquote>\n<p>如果查询params为非ObjectId格式时，大家一般都如何处理？</p>\n<blockquote>\n<p>1： 通过callback处理异常？</p>\n</blockquote>\n<blockquote>\n<p>2： 在查询之前就进行判断？如果不是正确格式则就不进入查询</p>\n</blockquote>\n</div>",
      "title": "CastError: Cast to ObjectId failed for value",
      "last_reply_at": "2017-01-11T08:24:45.001Z",
      "good": false,
      "top": false,
      "reply_count": 4,
      "visit_count": 2298,
      "create_at": "2015-04-12T09:27:26.841Z",
      "author": {
        "loginname": "rudyboy",
        "avatar_url": "https://avatars.githubusercontent.com/u/3855016?v=3&s=120"
      }
    },
    {
      "id": "5760bd41fa83165906ace2e9",
      "author_id": "566192ec28d9d1ba58c3a319",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>我们服务在线上跑了1.2个月，最近日志每隔几分报 <code>Caught exception:Error: read ECONNRESET at exports._errnoException (util.js:870:11) at TCP.onread (net.js:544:26)</code>\n\t每秒同时报这种异常有大几千条，由于这个原因是突然出现的，又不好定位当时对服务做了什么操作导致的，定位当时请求的路径也没打印出来。\n\t这种网络异常的大致原因是，客户端和服务已经建立了连接，只是服务端主动关闭了连接，是这样吗？有什么方法定位具体原因？\n\t一般对网络优化需要对http做什么设置，比如http agent 的maxFreeSockets等，对连接池设置大小等，还有其他常规重要的设置么？</p>\n</div>",
      "title": "每几秒批量报错Caught exception:Error: read ECONNRESET\r\n    at exports._errnoException (util.js:870:11)",
      "last_reply_at": "2017-01-11T08:13:05.796Z",
      "good": false,
      "top": false,
      "reply_count": 11,
      "visit_count": 1548,
      "create_at": "2016-06-15T02:28:17.203Z",
      "author": {
        "loginname": "jiangliqin",
        "avatar_url": "https://avatars.githubusercontent.com/u/12250847?v=3&s=120"
      }
    },
    {
      "id": "5875e7f606fa6e2a4e4f7315",
      "author_id": "57566f02efa4e8950e0a69ec",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>最近在使用log4js作为日志文件,但是在使用pm2创建多个实例的时候.log4js就存在多个进程操作一个文件,然后导致崩溃.查了log4js官方文档,也有cluster模式.但是需要手动判断cluster.isMaster, 请教下社区各位大神.有没有遇到过类似的问题,需要如何解决呢</p>\n</div>",
      "title": "关于pm2 cluster模式下如何区分master和worker?",
      "last_reply_at": "2017-01-11T08:08:22.361Z",
      "good": false,
      "top": false,
      "reply_count": 0,
      "visit_count": 88,
      "create_at": "2017-01-11T08:08:22.361Z",
      "author": {
        "loginname": "yuliang0912",
        "avatar_url": "https://avatars.githubusercontent.com/u/15665967?v=3&s=120"
      }
    },
    {
      "id": "5875d9579a36eb8e340875e8",
      "author_id": "534cfd3ae6f2676a12499913",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>有旁友用过electron-builder的nsis自动更新吗</p>\n<p>有个问题 <a href=\"https://github.com/electron-userland/electron-builder/issues/945\">https://github.com/electron-userland/electron-builder/issues/945</a>\n就是第一次安装后能够正常的自动更新，再更新就会报错，有大神知道是什么情况吗。</p>\n</div>",
      "title": "electron-builder autoupdate问题",
      "last_reply_at": "2017-01-11T07:05:59.301Z",
      "good": false,
      "top": false,
      "reply_count": 0,
      "visit_count": 114,
      "create_at": "2017-01-11T07:05:59.301Z",
      "author": {
        "loginname": "moJiXiang",
        "avatar_url": "https://avatars.githubusercontent.com/u/5847011?v=3&s=120"
      }
    },
    {
      "id": "586f78ae7dc832f33ab577e3",
      "author_id": "584f493ff3576dd333f86c14",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>想通过button点击事件发起post/get请求  实现“<code>&lt;a&gt;</code>标签”链接 界面跳转，但是没有成功。仅仅后台接受到了get/post请求，render失效；\n修改前代码：</p>\n<pre class=\"prettyprint\"><code>前端:\n     &lt;a type=&quot;button&quot; class=&quot;btn btn-success test-link-btn&quot; id=&quot;upload&quot; href=&quot;&#x2F;upload&quot;&gt;上行速度测试&lt;&#x2F;a&gt;\n      &lt;a type=&quot;button&quot; class=&quot;btn btn-success test-link-btn&quot; id=&quot;download&quot; href=&quot;&#x2F;download&quot;&gt;下行速度测试&lt;&#x2F;a&gt;\n\n后台：\nrouter.get(&quot;&#x2F;upload&quot;, function(req, res, next) {\n  &#x2F;&#x2F; console.log(&quot;=========================:upload:&quot; + req.body.SelectGatewaySNs);\n  res.render(&#x27;uploadtest&#x27;, { title: &#x27;上行测试&#x27; });\n});\n\n</code></pre><p>修改后代码：</p>\n<pre class=\"prettyprint\"><code>前端：\n        &lt;button class=&quot;btn btn-info&quot; type=&quot;button&quot; id=&quot;uploadTestBtn&quot;&gt;上行速度测试&lt;&#x2F;button&gt;\n         &lt;button class=&quot;btn btn-info&quot; type=&quot;button&quot; id=&quot;downloadTestBtn&quot;&gt;下行速度测试&lt;&#x2F;button&gt;\n\t\t \n点击事件：\n&#x2F;&#x2F;测试选中的节点\n$(&quot;#uploadTestBtn&quot;).click(function () {\n    var sns = getSelectSNs();\n    &#x2F;&#x2F; $.post(&#x27;&#x2F;upload&#x27;, {\n    &#x2F;&#x2F;     SelectGatewaySNs: sns\n    &#x2F;&#x2F; }, function (data) {\n    &#x2F;&#x2F; });\n    $.get(&#x27;upload&#x27;,function () {\n\n    });\n})\n\n后台代码没变\n</code></pre><p>现在是修改后的代码后台响应了get请求，http状态码：200,中间件res.render失效\n新手一名，还请赐教！！！</p>\n</div>",
      "title": "使用按键button标签实现 链接<a>跳转界面失效问题",
      "last_reply_at": "2017-01-11T06:40:34.918Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 313,
      "create_at": "2017-01-06T10:59:58.104Z",
      "author": {
        "loginname": "sxpsxp12",
        "avatar_url": "https://avatars.githubusercontent.com/u/24519721?v=3&s=120"
      }
    },
    {
      "id": "5875875206fa6e2a4e4f72e5",
      "author_id": "586c447e6a2a2984675bb06e",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>自己在公司实习了一段时间，用express写了一个小系统，功能已经实现，但是很多代码的规范性还不是很好，比如想把路由抽离成配置文件，增强代码的可读性，大家推荐一些好的开源项目被</p>\n</div>",
      "title": "express的一些好的开源项目 规范性较好",
      "last_reply_at": "2017-01-11T06:35:34.749Z",
      "good": false,
      "top": false,
      "reply_count": 3,
      "visit_count": 251,
      "create_at": "2017-01-11T01:16:02.817Z",
      "author": {
        "loginname": "lpm0205",
        "avatar_url": "https://avatars.githubusercontent.com/u/20716732?v=3&s=120"
      }
    },
    {
      "id": "57ecd0376ab98805449b95cb",
      "author_id": "5689d685c301558265041ce6",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><h1>微信小程序 cnode社区版本</h1>\n<blockquote>\n<p>官方文档：<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\">https://mp.weixin.qq.com/debug/wxadoc/dev/</a></p>\n</blockquote>\n<blockquote>\n<p>入门小例子: <a href=\"https://github.com/vincentSea/wxsapp\">https://github.com/vincentSea/wxsapp</a></p>\n</blockquote>\n<blockquote>\n<p>项目地址：<a href=\"https://github.com/vincentSea/wechat-cnode\">https://github.com/vincentSea/wechat-cnode</a></p>\n</blockquote>\n<blockquote>\n<p>参考资料：<a href=\"https://github.com/coolfishstudio/wechat-webapp-cnode\">https://github.com/coolfishstudio/wechat-webapp-cnode</a></p>\n</blockquote>\n<h3>小程序预览</h3>\n<p><img src=\"//dn-cnode.qbox.me/FvgakQd1kdDbKXFsyS1UDtfgIj6o\" alt=\"8.png\"></p>\n<h3>项目结构</h3>\n<p>&lt;pre&gt;\n│  .gitattributes\n│  .gitignore\n│  app.js                # 小程序逻辑\n│  app.json              # 小程序公共设置（页面路径、窗口表现、设置网络超时时间、设置多tab）\n│  app.wxss              # 小程序公共样式表\n│  <a href=\"http://README.md\">README.md</a>             # 小程序项目说明\n│<br>\n├─image                  # 小程序图片资源\n|\n├─pages                  # 小程序文件\n│  ├─common<br>\n│  ├─detail\n│  ├─index<br>\n│  │    index.js    # 页面逻辑\n│  │    index.wxml  # 页面渲染层\n│  │    index.wxss  # 页面样式\n│  ├─login\n|  ├─logs\n│  └─topics\n│<br>\n└─utils                  # 小程序公用方法模块\napi.js<br>\nutil.js<br>\n&lt;/pre&gt;</p>\n<h3>开发环境</h3>\n<p>下载地址 ：<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=1474887501214\">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=1474887501214</a></p>\n<h3>开发过程</h3>\n<ol>\n<li>配置默认启动页面</li>\n</ol>\n<p>在app.json文件修改注册页面的顺序，把“pages/topics/topics” 放在第一位，就会自动把topics.wxml 显示默认启动</p>\n<p>&lt;pre&gt;\n{\n“pages”:[\n“pages/topics/topics”,<br>\n“pages/detail/detail”,\n“pages/login/login”,\n“pages/index/index”,\n“pages/logs/logs”\n]\n}\n&lt;/pre&gt;</p>\n<ol>\n<li>\n<p>配置tabBar</p>\n<p>tabBar 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。</p>\n</li>\n</ol>\n<p>&lt;pre&gt;\n“tabBar”:{\n“color”:&quot;#444&quot;,\n“selectedColor”:&quot;#80bd01&quot;,\n“backgroundColor”:&quot;#fff&quot;,\n“borderStyle”:“white”,\n“list”:[{\n“pagePath”:“pages/topics/topics”,\n“text”:“首页”,\n“iconPath”:“images/bar/CNode.png”,\n“selectedIconPath”:“images/bar/CNodeHL.png”\n},{\n“pagePath”:“pages/index/index”,\n“text”:“我的”,\n“iconPath”:“images/bar/ME.png”,\n“selectedIconPath”:“images/bar/MEHL.png”\n}]\n}\n&lt;/pre&gt;</p>\n<ol>\n<li>\n<p>window 设置</p>\n<p>具体看文档https://mp.weixin.qq.com/debug/wxadoc/dev/framework/config.html?t=1475052056717</p>\n</li>\n<li>\n<p>简单封装wx.request(OBJECT)</p>\n</li>\n</ol>\n<p>&lt;pre&gt;\n// get请求方法\nfunction fetchGet(url, callback) {\n// return callback(null, top250)\nwx.request({\nurl: url,\nheader: { ‘Content-Type’: ‘application/json’ },\nsuccess (res) {\ncallback(null, res.data)\n},\nfail (e) {\nconsole.error(e)\ncallback(e)\n}\n})\n}</p>\n<pre class=\"prettyprint\"><code>&#x2F;&#x2F; post请求方法\nfunction fetchPost(url, data, callback) {\n  wx.request({\n    method: &#x27;POST&#x27;,\n    url: url,\n    data: data,\n    success (res) {\n      callback(null, res.data)\n    },\n    fail (e) {\n      console.error(e)\n      callback(e)\n    }\n  })\n}\n\nmodule.exports = {\n  &#x2F;&#x2F; METHOD\n  fetchGet: fetchGet,\n  fetchPost: fetchPost\n}\n</code></pre><p>&lt;/pre&gt;</p>\n<ol>\n<li>滚动底部加载下一页</li>\n</ol>\n<p>使用了小程序自带的scroll-view组件</p>\n<p><img src=\"//dn-cnode.qbox.me/FvLpvzso2nEk41PThVQEJ0rjeis7\" alt=\"2.png\"></p>\n<pre class=\"prettyprint language-bash\"><code>  &lt;!--列表list组件 --&gt;\n  &lt;template name=&quot;list&quot;&gt;\n    &lt;scroll-view class=&quot;scroll-posts-list&quot; style=&quot;height:100%&quot; scroll-y=&quot;true&quot; bindscrolltolower=&quot;lower&quot;&gt;\n      &lt;view class=&quot;postslist&quot;&gt;\n        &lt;block wx:for=&quot;{{postsList}}&quot;&gt;\n          &lt;view class=&quot;posts-list&quot;&gt;\n            &lt;navigator url=&quot;&#x2F;pages&#x2F;detail&#x2F;detail?id={{item.id}}&quot;&gt;\n              &lt;view class=&quot;posts-list-info&quot; index=&quot;{{index}}&quot;&gt;\n                  &lt;image class=&quot;userimg&quot; src=&quot;{{item.author.avatar_url}}&quot; &#x2F;&gt;\n                  &lt;view class=&quot;item-box&quot;&gt;\n                    &lt;view class=&quot;userinfo&quot;&gt;\n                      &lt;text class=&quot;username&quot;&gt;{{item.author.loginname}}&lt;&#x2F;text&gt;\n                      &lt;text class=&quot;time&quot;&gt;{{item.last_reply_at}}&lt;&#x2F;text&gt;\n                    &lt;&#x2F;view&gt;\n                    &lt;view class=&quot;posts-title&quot;&gt;\n                      &lt;view class=&quot;posts-tag hot&quot; wx:if=&quot;{{item.top === true}}&quot;&gt;置顶&lt;&#x2F;view&gt;\n                      &lt;view class=&quot;posts-tag&quot; wx:if=&quot;{{item.good === true}}&quot;&gt;精华&lt;&#x2F;view&gt;\n                      &lt;text&gt;{{item.title}}&lt;&#x2F;text&gt;\n                    &lt;&#x2F;view&gt;\n                  &lt;&#x2F;view&gt;\n              &lt;&#x2F;view&gt;\n              &lt;view class=&quot;bar-info&quot;&gt;\n                &lt;view class=&quot;bar-info-item&quot;&gt;\n                  &lt;image class=&quot;bar-info-item-icon&quot; src=&quot;&#x2F;images&#x2F;icon&#x2F;reply.png&quot;&gt;&lt;&#x2F;image&gt;\n                  &lt;view class=&quot;bar-info-item-number&quot;&gt;{{item.reply_count}}&lt;&#x2F;view&gt;\n                &lt;&#x2F;view&gt;\n                &lt;view class=&quot;bar-info-item&quot;&gt;\n                  &lt;image class=&quot;bar-info-item-icon&quot; src=&quot;&#x2F;images&#x2F;icon&#x2F;visit.png&quot;&gt;&lt;&#x2F;image&gt;\n                  &lt;view class=&quot;bar-info-item-number&quot;&gt;{{item.visit_count}}&lt;&#x2F;view&gt;\n                &lt;&#x2F;view&gt;\n\n                &lt;view class=&quot;bar-info-item2&quot;  wx:if=&quot;{{item.tab === &#x27;good&#x27;}}&quot;&gt;\n                  &lt;image class=&quot;bar-info-item-icon&quot; src=&quot;&#x2F;images&#x2F;icon&#x2F;type.png&quot;&gt;&lt;&#x2F;image&gt;\n                  &lt;view class=&quot;bar-info-item-number&quot;&gt;精华&lt;&#x2F;view&gt;\n                &lt;&#x2F;view&gt;\n                &lt;view class=&quot;bar-info-item2&quot;  wx:if=&quot;{{item.tab === &#x27;share&#x27;}}&quot;&gt;\n                  &lt;image class=&quot;bar-info-item-icon&quot; src=&quot;&#x2F;images&#x2F;icon&#x2F;type.png&quot;&gt;&lt;&#x2F;image&gt;\n                  &lt;view class=&quot;bar-info-item-number&quot;&gt;分享&lt;&#x2F;view&gt;\n                &lt;&#x2F;view&gt;\n                &lt;view class=&quot;bar-info-item2&quot;  wx:if=&quot;{{item.tab === &#x27;ask&#x27;}}&quot;&gt;\n                  &lt;image class=&quot;bar-info-item-icon&quot; src=&quot;&#x2F;images&#x2F;icon&#x2F;type.png&quot;&gt;&lt;&#x2F;image&gt;\n                  &lt;view class=&quot;bar-info-item-number&quot;&gt;问答&lt;&#x2F;view&gt;\n                &lt;&#x2F;view&gt;\n                &lt;view class=&quot;bar-info-item2&quot;  wx:if=&quot;{{item.tab === &#x27;job&#x27;}}&quot;&gt;\n                  &lt;image class=&quot;bar-info-item-icon&quot; src=&quot;&#x2F;images&#x2F;icon&#x2F;type.png&quot;&gt;&lt;&#x2F;image&gt;\n                  &lt;view class=&quot;bar-info-item-number&quot;&gt;招聘&lt;&#x2F;view&gt;\n                &lt;&#x2F;view&gt;\n              &lt;&#x2F;view&gt;\n          &lt;&#x2F;navigator&gt;\n          &lt;&#x2F;view&gt;\n        &lt;&#x2F;block&gt;\n      &lt;&#x2F;view&gt;\n    &lt;&#x2F;scroll-view&gt;\n\n    &lt;loading class=&quot;loading&quot; hidden=&quot;{{hidden}}&quot;&gt;\n      &lt;text class=&quot;loading-font&quot;&gt;加载中...&lt;&#x2F;text&gt;\n    &lt;&#x2F;loading&gt;\n  &lt;&#x2F;template&gt;\n</code></pre><pre class=\"prettyprint language-bash\"><code>  &lt;!-- topics.wxml  --&gt;\n  &lt;import src=&quot;..&#x2F;common&#x2F;nav.wxml&quot;&#x2F;&gt;\n  &lt;import src=&quot;..&#x2F;common&#x2F;list.wxml&quot;&#x2F;&gt;\n\n  &lt;view class=&quot;page topics&quot;&gt;\n    &lt;template is=&quot;nav&quot; data=&quot;{{ navList, activeIndex }}&quot;&#x2F;&gt;\n    &lt;template is=&quot;list&quot; data=&quot;{{ postsList, hidden }}&quot;&#x2F;&gt;\n  &lt;&#x2F;view&gt;\n</code></pre><p>滚动区的最大的父级层要设置height: 100%; 不然无法检测滚动事件\n也不知道是不是我布局的原因，我这里是一定要这样设置的</p>\n<pre class=\"prettyprint language-bash\"><code>.topics{\n  height: 100%;\n  overflow: hidden;\n}\n</code></pre><pre class=\"prettyprint language-bash\"><code>&#x2F;&#x2F; 滑动底部加载\nlower: function() {\n  console.log(&#x27;滑动底部加载&#x27;, new Date());\n  var that = this;\n  that.setData({\n    page: that.data.page + 1\n  });\n  if (that.data.tab !== &#x27;all&#x27;) {\n    this.getData({tab: that.data.tab, page: that.data.page});\n  } else {\n    this.getData({page: that.data.page});\n  }\n}\n</code></pre><p>用法</p>\n<pre class=\"prettyprint language-bash\"><code>  &lt;scroll-view class=&quot;scroll-posts-list&quot; style=&quot;height:100%&quot; scroll-y=&quot;true&quot; bindscrolltolower=&quot;lower&quot;&gt;\n  &lt;&#x2F;scroll-view&gt;\n</code></pre><h3>使用说明</h3>\n<ol>\n<li>将仓库克隆到本地：</li>\n</ol>\n<pre class=\"prettyprint language-bash\"><code>$ git clone https:&#x2F;&#x2F;github.com&#x2F;vincentSea&#x2F;wechat-cnode.git\n</code></pre><ol>\n<li>\n<p>打开<code>微信Web开放者工具</code>（注意：必须是<code>0.9.092300</code>版本）</p>\n</li>\n<li>\n<p>选择<code>添加项目</code>，填写或选择相应信息</p>\n</li>\n</ol>\n<ul>\n<li>AppID：点击右下角<code>无AppID</code></li>\n<li>项目名称：随便填写，因为不涉及到部署，所以无所谓</li>\n<li>项目目录：选择刚刚克隆的文件夹</li>\n<li>点击<code>添加项目</code></li>\n</ul>\n<h3>特别感谢</h3>\n<p>感谢 coolfish 的项目案例</p>\n<p>coolfish的github: <a href=\"https://github.com/coolfishstudio\">https://github.com/coolfishstudio</a></p>\n</div>",
      "title": "微信小程序 cnode社区版",
      "last_reply_at": "2017-01-11T06:32:02.536Z",
      "good": false,
      "top": false,
      "reply_count": 11,
      "visit_count": 2070,
      "create_at": "2016-09-29T08:26:31.371Z",
      "author": {
        "loginname": "vincentSea",
        "avatar_url": "https://avatars.githubusercontent.com/u/16203604?v=3&s=120"
      }
    },
    {
      "id": "53a64f50a087f45620971984",
      "author_id": "52f70c161b80994b0d773fd4",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>在对数组的遍历中，我在多处查到forEach差for的速度太大了，但是我自己试着测试时，结果却是相反的～</p>\n<p><img src=\"//dn-cnode.qbox.me/FmB84wW63trCThlGNdsxWpJFmqrO\" alt=\"d0c8a786c9177f3e04e69edc72cf3bc79e3d5614.jpg\"></p>\n<p>这是在 <a href=\"http://jsperf.com/fast-array-foreach\">http://jsperf.com/fast-array-foreach</a> 的在线运行结果，很明显能看出来forEach很慢</p>\n<p>但是我在chrome控制台中再次运行时\n<img src=\"//dn-cnode.qbox.me/FtLjM3geIffp2RvjO-aT53rZkdQX\" alt=\"1e30e924b899a9018f6236e71f950a7b0308f588.jpg\"></p>\n<p>却得到了这样的结果，有点疑惑，希望大家能解释下</p>\n</div>",
      "title": "forEach与for的性能对比，谁快谁慢？",
      "last_reply_at": "2017-01-11T06:14:33.917Z",
      "good": false,
      "top": false,
      "reply_count": 14,
      "visit_count": 2221,
      "create_at": "2014-06-22T03:36:48.727Z",
      "author": {
        "loginname": "zhiyishou",
        "avatar_url": "https://avatars.githubusercontent.com/u/5999163?v=3&s=120"
      }
    },
    {
      "id": "5875ae2ee65101c634fc9656",
      "author_id": "584964723ebad99b336b1eb2",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>之前撸了一边vue Api苦于没项目练手 看到了<a href=\"/user/1340641314\">@1340641314</a> 分享的项目就照着做了一个\n页面直接使用mint-ui 仿着<a href=\"/user/1340641314\">@1340641314</a> 的页面做了\n大概样子做出来了还有功能要完善\n<a href=\"http://cnode.lxxlyy.com:8080\">预览: http://cnode.lxxlyy.com:8080</a>\n<a href=\"https://github.com/without-yy/cnode-vue\">github: https://github.com/without-yy/cnode-vue</a></p>\n<p><img src=\"//dn-cnode.qbox.me/FtmU97rg3aj5sp95zyC-vnENHTR2\" alt=\"cnode.png =300\">\n<img src=\"//dn-cnode.qbox.me/FiP-Qa9WR6PEqbUs_xF99nyINjBG\" alt=\"cnodeUser.png\">\n<img src=\"//dn-cnode.qbox.me/Fh1ajAX-BJVLqtRXnEZ62L3Zcvzs\" alt=\"cnodeList.png\"></p>\n</div>",
      "title": "使用mint-ui,vue2.0练习开发cnode社区",
      "last_reply_at": "2017-01-11T05:52:01.201Z",
      "good": false,
      "top": false,
      "reply_count": 1,
      "visit_count": 188,
      "create_at": "2017-01-11T04:01:50.732Z",
      "author": {
        "loginname": "without-yy",
        "avatar_url": "https://avatars.githubusercontent.com/u/21141027?v=3&s=120"
      }
    },
    {
      "id": "586e392abcf66127778bd2eb",
      "author_id": "55a668125a4b4a86539c2fd4",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>我记得最开始是你<a href=\"/user/shinygang\">@shinygang</a></p>\n</div>",
      "title": "cnode被前端练各种技术",
      "last_reply_at": "2017-01-11T05:43:05.509Z",
      "good": false,
      "top": false,
      "reply_count": 13,
      "visit_count": 989,
      "create_at": "2017-01-05T12:16:42.462Z",
      "author": {
        "loginname": "1340641314",
        "avatar_url": "https://avatars.githubusercontent.com/u/8424643?v=3&s=120"
      }
    },
    {
      "id": "586c7a10c59e6c686720824f",
      "author_id": "586c447e6a2a2984675bb06e",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>想上手学习vue，不知如何开始，看了API 觉得没有实例总是干巴巴的，希望能有朋友可以推荐几个好上手的DEMO 简单一点的  零基础最好~</p>\n</div>",
      "title": "vue初学者demo",
      "last_reply_at": "2017-01-11T04:36:22.164Z",
      "good": false,
      "top": false,
      "reply_count": 18,
      "visit_count": 913,
      "create_at": "2017-01-04T04:29:04.434Z",
      "author": {
        "loginname": "lpm0205",
        "avatar_url": "https://avatars.githubusercontent.com/u/20716732?v=3&s=120"
      }
    },
    {
      "id": "5875ad0a9a36eb8e340875ce",
      "author_id": "5875aa4606fa6e2a4e4f72f5",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>最近毕业在家找不到工作就打算学学react  然后做了个魔兽世界拍卖行的价钱查询器玩\n但是遇到一个问题就是游戏他们给的拍卖行数据API并没有细化到每个物品  所以一下就直接丢过来一个将近10W行的json文件\n之前我的方法后台默认十来分钟更新一次api  然后有需要的时候也可以手动更新一次 直接下载下来存在内存里面</p>\n<p>查询物品因为数据实在有点多 而且要查找多条数据中符合的最低数值 我最早找了一个叫crossfilter的库 但是文档看的不太明白 只能做到filter出物品 并不能再sort价钱\n然后试了下发现单纯for loop一遍的时间其实也没花多久 所以现在就直接for loop了。。 但是还是希望能加快查询的速度</p>\n<p>现在做的差不多了  突然想起魔兽并不只是一个服务器。。 单单一个服务器的API就有15MB至少  那那么多服务器 难道全部存在内存里面 然后固定时间更新一次吗\n而且待机下内存普遍150MB+ 查询几个物品就会增到两百多  不知道这是react的原因还是nodejs的原因  （刚接触react 感觉里面一直复制state会增加很多内存消耗吧？）</p>\n<p>这是在我家电脑架的一个demo:  <a href=\"http://wow.scitnet.com\">http://wow.scitnet.com</a>  (希望我家电脑不会炸)\n谢谢各位</p>\n</div>",
      "title": "node后台处理大型json数据有啥好的库吗",
      "last_reply_at": "2017-01-11T04:17:34.811Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 196,
      "create_at": "2017-01-11T03:56:58.005Z",
      "author": {
        "loginname": "yyss8",
        "avatar_url": "https://avatars.githubusercontent.com/u/13445723?v=3&s=120"
      }
    },
    {
      "id": "586b62b4c59e6c6867208216",
      "author_id": "586632f65eac96bb04d3e2c9",
      "tab": "job",
      "content": "<div class=\"markdown-text\"><p><strong>职位要求</strong></p>\n<ul>\n<li>拥有至少一年的Node.js开发经验，JavaScript 基本概念清晰，熟练掌握闭包、回调、Promise 等</li>\n<li>能熟练使用MongoDB、mongoose、express、Nginx、varnish；</li>\n<li>对lodash、async等有一定的了解；</li>\n<li>熟悉Github、SVN；</li>\n<li>能熟练使用Linux指令者优先；</li>\n<li>代码质量要精益求精，注重代码的维护和优化，能够独立完成开发任务。</li>\n</ul>\n<p><strong>岗位职责</strong>\n负责公司新项目的开发和现有项目的维护工作</p>\n<p><strong>PS：</strong>\n早10晚7，弹性工作时间，加班可以调休。\n公司官网：<a href=\"http://www.idoool.com\">http://www.idoool.com</a>\n目前阶段：A轮\n工作地点：北京市 朝阳区 酒仙桥路 52号院 东方科技园</p>\n<p><strong>联系方式</strong>\n<strong>请发送简历至guang_hy@163.com，简历请注明来自CNODE</strong></p>\n</div>",
      "title": "【北京朝阳】北京星享网络信息技术有限公司 招聘Node.js后端工程师",
      "last_reply_at": "2017-01-11T04:05:05.887Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 243,
      "create_at": "2017-01-03T08:37:08.988Z",
      "author": {
        "loginname": "Huyaguang",
        "avatar_url": "https://avatars.githubusercontent.com/u/24839325?v=3&s=120"
      }
    },
    {
      "id": "587341b24a306e3f05b8feac",
      "author_id": "53d060de691a43091266b04f",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>先放代码：</p>\n<hr>\n<pre class=\"prettyprint\"><code>function func1() {\n    console.log(&#x27;这是第一个函数&#x27;);\n}\nfunction func2() {\n    console.log(&#x27;这是第二个函数&#x27;);\n}\nfunction func3() {\n    console.log(&#x27;这是第三个函数&#x27;);\n}\n\nfunction funcall(val) {\n    switch (val) {\n        case &#x27;1&#x27;:\n            func1();\n            break;\n        case &#x27;2&#x27;:\n            func2();\n            break;\n        case &#x27;3&#x27;:\n            func3();\n            break;\n        default:\n            break;\n    }\n}\nfuncall(&#x27;1&#x27;);\n</code></pre><hr>\n<p>怎么写funcall函数实现自动调用函数呢？传的值和函数是有关系的，比如值1对应func1，值2对应func2，目前我只会用switch方式来手工一一对应，数量比较少的时候还可以，但是如果对应的数量多了写起来就很烦，请教各位怎么改写funcall最简单？</p>\n</div>",
      "title": "Nodejs怎么自动生成函数名？",
      "last_reply_at": "2017-01-11T04:01:49.393Z",
      "good": false,
      "top": false,
      "reply_count": 15,
      "visit_count": 469,
      "create_at": "2017-01-09T07:54:26.400Z",
      "author": {
        "loginname": "ShookABeta",
        "avatar_url": "https://avatars.githubusercontent.com/u/8251819?v=3&s=120"
      }
    },
    {
      "id": "5873488c2c842b1f05f759d0",
      "author_id": "58734667ce6ed8e7042e1281",
      "tab": "job",
      "content": "<div class=\"markdown-text\"><p>**General Summary **\nAutodesk seeks an experienced and results-driven Senior Software Engineer for BIM360 product group in Autodesk China R&amp;D Center (ACRD) based in Shanghai, China.\nThis is your chance to help shape the future of BIM360 for Project, Field and BIM Managers to accelerate delivery, save money and reduce risk.  As a Senior Software Engineer, you will be responsible for developing the best class web service and applications, using Agile Development process.\nThe right candidate must be passionate on state-of-the-art technologies for solving customer problems.</p>\n<p>**Responsibilities **</p>\n<ul>\n<li>Being part of a collaborative tech team</li>\n<li>Building new, innovative and disruptive web services targeted at the construction industry.</li>\n<li>Work with your agile team to deliver solutions on time and at high quality that conform to user story acceptance criteria</li>\n<li>Participate in Design and Code reviews to ensure that our design and code meets high standards.</li>\n<li>Test, debug, and maintain the service architecture throughout the product lifecycle</li>\n<li>Keep your ear to the ground, helping us define and analyze industry best practices and important developments in large scale cloud applications.</li>\n</ul>\n<p><strong>Qualifications</strong></p>\n<ul>\n<li>BS/MS degree in Computer Science, Engineering or a related subject.</li>\n<li>3~5+ years of professional development experience in cloud service applications.</li>\n<li>At least 1+ years of experience in web application development using Html, CSS, JavaScript and jQuery.</li>\n<li>Experienced in NodeJS development for large systems.</li>\n<li>Experienced in Java development is also fine</li>\n<li>Strong programming skills, with the ability to follow department standards and meeting high levels of quality, clarity and efficiency; ability to organize and plan work for self</li>\n<li>Experience working with both sides of a RESTful web service.</li>\n<li>Experience with RDBs and SQL</li>\n<li>Good oral and written communication skills in English.</li>\n<li>Familiar with Agile/Scrum development methodologies.</li>\n<li>Experience in software development in Cloud platforms such as AWS is a big plus.</li>\n<li>Experience in Linux/ Ubuntu system is a plus.</li>\n<li>Experience in Angular or React is a plus.</li>\n</ul>\n<p>待遇：20~40万年薪，另有年终奖，五险一金，弹性工作\n申请邮箱： <a href=\"mailto:jenny.lu@autodesk.com\">jenny.lu@autodesk.com</a></p>\n</div>",
      "title": "【上海】Autodesk招聘前端/后端高级工程师",
      "last_reply_at": "2017-01-11T03:56:53.823Z",
      "good": false,
      "top": false,
      "reply_count": 1,
      "visit_count": 122,
      "create_at": "2017-01-09T08:23:40.258Z",
      "author": {
        "loginname": "AutodeskHR",
        "avatar_url": "https://avatars.githubusercontent.com/u/24953832?v=3&s=120"
      }
    },
    {
      "id": "585bf79251aa32885d4f0f64",
      "author_id": "564868bf74013ae17f60bfee",
      "tab": "job",
      "content": "<div class=\"markdown-text\"><p>先放一张前两天 <a href=\"http://aqicn.org/map/asia\">aqicn.org</a> 上的空气质量指数的截图，右下角是放大后的新加坡</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/82d0750dgw1faxmq5inn3j21ac0z44qp.jpg\" alt>\n（右键看大图）</p>\n<h4>公司简介</h4>\n<p><strong>Cloud Wings</strong> 创立于 2015 年，是一个由新加坡南洋理工大学（NTU）的科研团队发展成的技术主导创业公司，公司目前主要专注于研发前沿科技优化用户体验</p>\n<h4>团队介绍</h4>\n<ul>\n<li>创始人 <strong>文勇刚</strong> 博士毕业于美国麻省理工大学（MIT）EECS 系，曾主持多个科技创新项目多次取得 NAB Show、ASEAN ICT Award、Datacentre Dynamics 等工业项目奖项，文博士目前主要主持公司技术研发</li>\n<li>公司 CEO <strong>David Toh</strong> 于康奈儿大学获得电子电气工程及财务双学位，曾就职于雷曼兄弟银行，星发展银行任高管，David 目前主要主持公司融资、项目合作、公司发展战略</li>\n<li>公司常务经理毕业于华南理工大学联合班，大规模分布式深度学习架构师，智能视频分析系统架构师，曾就职于美国英伟达公司，曾多次在近年 ImageNet 竞赛中取得好成绩，目前主持公司日常工作、团队建设、产品管理并分管人工智能算法团队</li>\n<li>团队工程技术负责人毕业于四川大学，曾就职于中兴科技、阿里云等公司多年，曾负责多个创业项目的工程技术，目前负责公司工程团队建设，工程架构管理</li>\n<li>工程团队主要毕业于中科大、四川大学等，大部分曾多年就职或者实习于阿里巴巴、科大讯飞、SAP 等国内外知名 IT 公司，拥有丰富的线上工程实践经验</li>\n<li>算法研发工作由文勇刚博士主持，团队成员来自北京大学、中科院</li>\n</ul>\n<h4>基本要求（全职）</h4>\n<ul>\n<li><strong>985/211 高校计算机相关专业，本科及以上</strong>学历，或者（如果不满足学历条件）五年以上直接相关行业工作经验。因为目前公司规模情况在没有足够的新加坡籍员工配额的情况下，只能申请要求较高的 EP 工作准证，这个是新加坡人力部的要求</li>\n</ul>\n<p>具体可以去 <a href=\"https://services.mom.gov.sg/sat/\">https://services.mom.gov.sg/sat/</a> 把自己的情况填进去测试一下，<strong>可以达到要求的测试结果如下</strong></p>\n<p><code>Based on the information you have provided, the individual is likely to qualify for both Employment Pass (EP) and S Pass.</code></p>\n<p>而如果结果是 <code>S Pass only</code> 的话可能难度就比较大了（如果能力强也可以发来你的简历，我们可以通过调整薪资来达到要求）</p>\n<ul>\n<li>(学历达到要求的情况下) <strong>1 至 3 年</strong> 产品实际上架/上线、产品开发及维护经验。另外，比如 16 年的应届毕业生，如果在校期间有较多的开发和项目经历，或者能够达到一年以上开发经验的水平也是可以的</li>\n<li>能够<strong>尽快到岗</strong>，最晚 2017 年春节后开始上班（由于申请签证预计需要 20 天左右的时间，所以应聘者需要在 2017 年 1 月 15 号之前准备好护照、学籍证明的翻译件等材料）</li>\n<li>能够熟练使用 *nix 系统以及 Git 等工具</li>\n<li>拥有较好的团队精神和沟通技巧，要求能够适应敏捷开发的节奏，以及较强的自学能力</li>\n<li>科学上网、用 Google 查询英文技术文档、较强的搜集和整理信息的能力</li>\n</ul>\n<h4>基本要求（实习）</h4>\n<ul>\n<li><strong>985/211 或者其他知名学校，计算机相关专业</strong>在校，且 2017 或 2018 年毕业的本科学生或研究生</li>\n<li>在毕业前保证<strong>至少连续 3 个月</strong>的实习时间</li>\n<li>在校期间有过开发实践经验，或者有过相关的技术岗位实习经历</li>\n<li>科学上网、用 Google 查询英文技术文档、较强的搜集和整理信息的能力</li>\n<li>有意愿毕业后加入公司做全职工作的优先</li>\n</ul>\n<h4>职位介绍</h4>\n<p><strong>以下均为全职的要求，实习生的要求相应降低</strong></p>\n<h5>Web 前端工程师</h5>\n<ul>\n<li>掌握 CSS/JS 基础知识（比如《CSS 权威指南》和《JS 高程》应该至少刷过一遍吧，Bootstrap 用过吧，遇到问题应该知道去查 MDN 或者相应标准而不是去看 W3School 吧)</li>\n<li>熟悉 node.js 及常见的前端自动化工具（Webpack 等）的使用</li>\n<li>了解计算机网络、前端安全、前端优化等知识</li>\n<li>使用过 React/Vue/Angular 中的至少一个</li>\n<li>有后端开发框架（比如 Rails/Django/Laravel 等）使用经验者优先</li>\n<li>有 UI/UX 设计等经验者优先</li>\n</ul>\n<h4>待遇情况</h4>\n<h5>全职工程师</h5>\n<ul>\n<li><strong>$4000 / Mon</strong> 起步，一年 <strong>14 薪</strong> (新币，汇率 5 左右) ，能力强者上不封顶</li>\n<li>早期全职员工，根据对公司贡献，有公司的股份奖励</li>\n</ul>\n<h5>实习生</h5>\n<ul>\n<li><strong>$1300 - $1800 / Mon</strong> (新币，汇率 5 左右)，属于南洋理工大学访问/交换生</li>\n</ul>\n<h4>加分点</h4>\n<p><strong>意思是非必须要求，但是会作为具体待遇的评定依据，优秀的实习生也会有额外的补贴和福利</strong></p>\n<ul>\n<li>在 Stack Overflow、Segmentfault、V2EX、CNode、RubyChina、掘金、知乎、豆瓣读书 等社区有活跃的账号</li>\n<li>在 GitHub 有过 Star 数超过 100 的开源项目或者参与过其他知名项目</li>\n<li>有过算法竞赛，或其他专业开发大赛等获奖经历</li>\n<li>超过上面要求的工作经验，或者知名企业工作（或实习）经历，或者顶尖学校毕业</li>\n</ul>\n<h4>配置及优势</h4>\n<ul>\n<li>开发硬件为中高配 15 寸 <strong>MBP + Dell 显示器</strong>，零食饮料都有供应</li>\n<li>新加坡<strong>没有墙</strong>，也是世界上网速最快的国家之一。公司平均每位开发员工有超过 100Mb 的商用网络带宽</li>\n<li>提供一定报销额度以购买专业书籍、专业软件、互联网服务等（只要是对开发有帮助的）</li>\n<li>新加坡全年的法定节假日大概 10 天，此外全职员工有不超过 <strong>15 天</strong> 的带薪年假</li>\n<li>公司为全职员工提供商业医疗保险（非新加坡永久居民是没有社保、公积金这些的）</li>\n<li>如果有意愿在工作的同时拿个 NTU 的<strong>研究生学位</strong>，可以由创始人推荐参加学校的数学和英语考试，通过后即可免雅思和 GRE 入学（学制一年，学费 15 万人民币左右）</li>\n<li>NTU 里有<strong>健身房、游泳池</strong>、室内羽毛球场、网球场、足球场等，都是<strong>免费开放的</strong>，可以充分锻炼身体</li>\n<li>NTU 学校风景优美，有很多优质又便宜的餐厅，有免费校车直达轨道交通站</li>\n<li>全职的 EP 准证属于外籍员工最高等级的工作签证，可以为家属申请比旅游签证更为宽松的探亲访问签证</li>\n<li>新加坡的<strong>空气质量</strong>比国内大多数城市要好，空气指数全年大部分时间都在 50 以内，除了夏季受马来西亚烧芭影响会有短期的 PM10 超标</li>\n<li>新加坡靠近赤道，全年温度都在 25-35 度之间，很适合过冬，夏天也不会太热</li>\n</ul>\n<h4>说明</h4>\n<ul>\n<li>无特殊说明时货币单位均为人民币</li>\n<li>实际工资是以新币发放，新币也是用 <code>$</code>（Dollar 符） 表示，目前的汇率 ：<a href=\"http://finance.sina.com.cn/money/forex/hq/SGDCNY.shtml\">http://finance.sina.com.cn/money/forex/hq/SGDCNY.shtml</a></li>\n<li>新加坡的税率很低，为年度自行申报，以目前的全职岗位的待遇来算，一年的需要缴纳的税不超过一万人民币。也没有其他扣除，所以待遇基本上可以理解成税后收入</li>\n</ul>\n<h4>FAQ</h4>\n<ul>\n<li>Q：接受远程工作吗？</li>\n<li>A：不接受</li>\n<li> </li>\n<li>Q：融资情况如何？</li>\n<li>A：公司处于早期阶段，但是融资顺利，第一轮融资后估计在千万美金级别</li>\n<li> </li>\n<li>Q：印象中新加坡的新加坡生活成本不是很高吗，这个待遇算下来优势何在？</li>\n<li>A：新加坡的房租价格相对北上深要贵大概 10%-20%，但是可以在网上找到大量的非中介房源，而且一般都没有物管等费用。另外，目前工作地点是在南洋理工大学里面，学校里有很多优质便宜的食堂和餐厅，相对校外饮食开销会少很多。如果再算上较低的税率，实际生活开销跟国内一线城市持平</li>\n<li> </li>\n<li>Q：为什么不直接在新加坡招人，而要到国内招人？</li>\n<li>A：新加坡毕竟是个小地方，互联网行业的体量相比国内太小了，而且新加坡人热衷于金融行业，在当地不好招人。另外，也正是考虑到出国工作对一些人来说会难以抉择，所以我们给待遇会比国内的同等要求的其他公司相对要高一些</li>\n<li> </li>\n<li>Q：签证是需要自己去使领馆申请吗？</li>\n<li>A：不是的，应聘者需要提供护照、学历证明的翻译件等材料的扫描件，然后由公司直接向新加坡人力部申请。批准后会发放电子版的 IPA 文件，打印出来即可作为入境凭证，入境之后再去新加坡人力部办理后续手续。实习生提供护照、在读证明等材料的扫描件，以及注册南洋理工大学的交流/交换学生的在线申请系统，后续操作我们会提供指导和帮助</li>\n<li> </li>\n<li>Q：新加坡华人多吗？日常交流用什么语言？</li>\n<li>A：公司目前大部分成员都是中国人。在新加坡，华人占 70% 左右，除了几乎所有的书面语言都是（英式）英语外，在外面大部分时间都可以说中文（当地叫做华语）</li>\n<li> </li>\n<li>Q：去新加坡的机票贵吗？</li>\n<li>A：大部分时候普通单程经济舱票价在 1500 以内，部分城市有廉价航空，淡季可以低至 700 以内</li>\n<li> </li>\n<li>Q：很想来实习，但是怕耽误了做毕业设计/毕业论文怎么办？</li>\n<li>A：我们可以提供接收本科生校外做毕设/论文的公函，助你实习毕设两不误</li>\n</ul>\n<h4>联系方式</h4>\n<ul>\n<li>Email：<code>atob(decodeURIComponent(&quot;Y29udGFjdEBpanVnby5uZXQ%3D&quot;))</code></li>\n<li>附件里放上 PDF 格式的简历，或者在邮件里放上在线简历地址</li>\n<li>请尽可能提供能够反映个人特点的社交网络账号</li>\n<li>实习生请同时提供中文和英文简历</li>\n</ul>\n<h4>其他</h4>\n<h5>关于 Email 地址的域名</h5>\n<p>那个网站是早期成员在国内注册的公司的一个 Demo 产品，现已年久失修，只不过还在用这个域名的邮箱而已</p>\n<h5>关于工作时间</h5>\n<ul>\n<li>Mon-Thu: 9:00am - 6:00pm</li>\n<li>Fri: 9:00am - 5:30pm</li>\n</ul>\n<h5>关于全职的学历要求</h5>\n<p>不是说非得要 985/211，只是结合着公司提供待遇以及工作经验要求来看，需要达到这个学历可能才比较容易申请到 EP，具体的评判标准我们也不知道。一个比较合理的方法就是去原文中的那个在线测试地址看看自己的情况是不是符合申请 EP</p>\n<p><s>另外，我们也招 Java 后端和 Android 开发，完整的招聘信息： <a href=\"https://www.v2ex.com/t/329469\">https://www.v2ex.com/t/329469</a></s>\n<strong>(除了前端全职，其他岗位目前基本已招满）</strong></p>\n</div>",
      "title": "[新加坡]南洋理工大学初创公司招初 / 中级前端（React）全职（20K+）和实习（6-9K）；待遇丰厚，远离雾霾，以及 NTU 读研机会",
      "last_reply_at": "2017-01-11T03:54:32.005Z",
      "good": false,
      "top": false,
      "reply_count": 7,
      "visit_count": 635,
      "create_at": "2016-12-22T15:56:02.391Z",
      "author": {
        "loginname": "mdluo",
        "avatar_url": "https://avatars.githubusercontent.com/u/4597409?v=3&s=120"
      }
    },
    {
      "id": "586c669bc59e6c6867208249",
      "author_id": "50b5bc5d637ffa4155091236",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>跟dclound的mui h5 plus+ 有什么不同吗?</p>\n</div>",
      "title": "微信小程序是不是就是封装的webview?",
      "last_reply_at": "2017-01-11T02:51:25.375Z",
      "good": false,
      "top": false,
      "reply_count": 4,
      "visit_count": 578,
      "create_at": "2017-01-04T03:06:03.112Z",
      "author": {
        "loginname": "yakczh",
        "avatar_url": "https://avatars.githubusercontent.com/u/6591466?v=3&s=120"
      }
    },
    {
      "id": "58759b172d086de6340db33f",
      "author_id": "5618d6ebefc7a0bd4fb338f6",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>我的应用类似于一个手机号码缴费的系统，根据手机号码的缴费订单之前销售的代理商进行返利。\n当前的表结构如下：\n用户表(users)，其中有包含下游用户id的一个数组。结构如下：\n\t{\n\t\t_id: ObjectId;\n\t\tacceptOrder: [ObjectId]; // 订单id\n\t}\n订单表(orders)，其中有包含号码id的一个数组；\n\t{\n\t\t_id: ObjectId;\n\t\thaveNo: [ObjectId]; // 号码id\n\t}\n充值订单表(rechargeOrders)，包含号码id和充值金额\n\t{\n\t\t_id: ObjectId;\n\t\tfee: Number; // 充值金额\n\t\tcreatedAt: Date; // 充值时间\n\t}\n当前需要按照用户的维度统计应结算的返利，代码如下：</p>\n<pre class=\"prettyprint\"><code>db.users.aggregate([\n\t{$unwind: &quot;$acceptOrder&quot;},\n\t{$project: {_id: &quot;$_id&quot;, acceptOrder: &quot;$acceptOrder&quot;}},\n\t{$lookup: {\n\t\tfrom: &quot;orders&quot;,\n\t\tlocalField: &quot;acceptOrder&quot;,\n\t\tforeignField: &quot;_id&quot;,\n\t\tas: &quot;orders&quot;\n\t}},\n\t{$unwind: &quot;$orders&quot;},\n\t{$project: {_id: &quot;$_id&quot;, haveNo: &quot;$orders.haveNo&quot;}},\n\t{$unwind: &quot;$haveNo&quot;},\n\t{$lookup: {\n\t\tfrom: &quot;rechargeorders&quot;,\n\t\tlocalField: &quot;haveNo&quot;,\n\t\tforeignField: &quot;_simcardId&quot;,\n\t\tas: &quot;rechargeOrders&quot;\n\t}},\n\t{$unwind: &quot;$rechargeOrders&quot;},\n\t{$match: { &quot;rechargeOrders.paid&quot;: true, &quot;rechargeOrders.createdAt&quot;: {$lt: ISODate(&quot;2017-01-11T00:00:00.000+08:00&quot;) }}},\n\t{$project:  {_id: &quot;$_id&quot;, fee: &quot;$rechargeOrders.fee&quot;}},\n\t{$group: {\n\t\t_id: {_id: &quot;$_id&quot;, company: &quot;$company&quot;},\n\t\tfee: {$sum: &quot;$fee&quot;},\n\t\tcount: {$sum: 1}\n\t}}\n])\n</code></pre><p>当前的数据库版本为3.4.1，用户表有100多条记录，订单表有600条记录，充值订单表有20k条记录。每个表的_id字段和一对多的数组都设置了索引。当前出现的问题是，在这样的数量级的情况下，使用上面的语句查询起来需要1700s左右。经过分析，瓶颈应该是在加上$group这句之后，在$group之前的语句最多只需要3s的时间。实在不知道应该如何优化？</p>\n</div>",
      "title": "如何提升mongodb中group的效率",
      "last_reply_at": "2017-01-11T02:49:05.078Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 173,
      "create_at": "2017-01-11T02:40:23.740Z",
      "author": {
        "loginname": "mehunk",
        "avatar_url": "https://avatars.githubusercontent.com/u/10388497?v=3&s=120"
      }
    },
    {
      "id": "5874f53a2d086de6340db327",
      "author_id": "57bbea611d27b9113348a4f6",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>毕业至今做iOS开发也有两三年时光了。想想也不能在一棵树上吊死啊。\n深思熟虑还是选择Node.js作为下一个学习方向。奈何前端小白，白的都透明了。。。\n各位老司机带带路呗。。。还望给个学习路线参考参考。。。谢</p>\n</div>",
      "title": "Node.js新手入门指南",
      "last_reply_at": "2017-01-11T02:30:39.184Z",
      "good": false,
      "top": false,
      "reply_count": 4,
      "visit_count": 292,
      "create_at": "2017-01-10T14:52:42.038Z",
      "author": {
        "loginname": "huangjianke",
        "avatar_url": "https://avatars.githubusercontent.com/u/8692455?v=3&s=120"
      }
    },
    {
      "id": "5875936706fa6e2a4e4f72f0",
      "author_id": "5837996b27d001d606ac1940",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>xxx.iss文件</p>\n<pre class=\"prettyprint\"><code>[Setup]\n; NOTE: The value of AppId uniquely identifies this application.\n; Do not use the same AppId value in installers for other applications.\n; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)\nAppId={{51208CF4-0BA0-4938-B0B3-9A8665B12387}\nAppName={#MyAppName}\nAppVersion={#MyAppVersion}\nAppVerName={#MyAppName} {#MyAppVersion}\n</code></pre><p>如何在node中读取上述.iss文件的AppVersion变量呢?</p>\n</div>",
      "title": "如何在node中读取.iss文件的变量",
      "last_reply_at": "2017-01-11T02:28:08.642Z",
      "good": false,
      "top": false,
      "reply_count": 1,
      "visit_count": 138,
      "create_at": "2017-01-11T02:07:35.074Z",
      "author": {
        "loginname": "Hfimy",
        "avatar_url": "https://avatars.githubusercontent.com/u/18360774?v=3&s=120"
      }
    },
    {
      "id": "5875882106fa6e2a4e4f72e8",
      "author_id": "56ce68bc842c03521a73520e",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>刚开始注册的时候随意弄了用户名和头像，现在在设置里面好像改不了，怎么办？</p>\n</div>",
      "title": "cnode社区是不是不能修改用户名和头像？",
      "last_reply_at": "2017-01-11T01:34:38.053Z",
      "good": false,
      "top": false,
      "reply_count": 1,
      "visit_count": 171,
      "create_at": "2017-01-11T01:19:29.035Z",
      "author": {
        "loginname": "qujinxiong",
        "avatar_url": "https://avatars.githubusercontent.com/u/15104950?v=3&s=120"
      }
    }
  ]
}